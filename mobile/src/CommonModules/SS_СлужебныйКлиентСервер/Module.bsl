
#Область ОбработкаСобытий  


#Область ФормаНачало 


&НаКлиенте
Процедура ОбработатьСобытиеДействиеВыбор(ЭтаФорма, Действие) Экспорт     
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/action";
	СтруктураДанных = Новый Структура("action", Действие);     
	СтруктураДанных.Вставить("dataonly", ложь);   
	СтруктураДанных.Вставить("code", ТекущееПодключение.ШтрихкодСотрудника);
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
						
			ОткрытьФорму(ПолученныеДанные.data.ИмяФормы,Новый Структура("Описание", ПолученныеДанные.data.Описание),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
						
		Иначе  
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка получения действий: "+ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  	 
	
КонецПроцедуры


#КонецОбласти   

#Область ФормаСписок  


&НаКлиенте
Процедура ОбработатьСобытиеСписокДокументовВыбор(ЭтаФорма, Действие, Предмет) Экспорт     
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/actionitem";
	СтруктураДанных = Новый Структура("action, actionitem", Действие, Предмет);    
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
						
			ОткрытьФорму(ПолученныеДанные.data.ИмяФормы,Новый Структура("Описание", ПолученныеДанные.data.Описание),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
						
		Иначе  
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка получения действий: "+ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСписка(ЭтаФорма, Действие) Экспорт  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/action";
	СтруктураДанных = Новый Структура("action", Действие);  
	СтруктураДанных.Вставить("dataonly", Истина); 
	СтруктураДанных.Вставить("code", ТекущееПодключение.ШтрихкодСотрудника);
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
						
			SS_РаботаСФормами.ОтрисоватьФормуПоОписанию(ЭтаФорма, ПолученныеДанные.data.Описание, Истина);	
						
		Иначе  
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка получения действий: "+ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  
	
КонецПроцедуры


#КонецОбласти

#Область ФормаДействие      


&НаКлиенте
Процедура ОбработатьКомандуДействие(ЭтаФорма, Действие, Предмет, ИмяКоманды) Экспорт
	
	Если Действие = "Приемка материалов" Тогда
		
		Если ИмяКоманды = "ПриемкаМатериаловПроверкаКоличестваЗавершить" Тогда
			
			КоличествоДокумент = 0;
			КоличествоФакт = 0;
			МассивСтрокНоменклатуры = Новый Массив;
			
			Для Каждого СтрокаТаблицы Из ЭтаФорма.СписокНоменклатуры Цикл
				СтруктураСтрока = Новый Структура;	
				СтруктураСтрока.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
				СтруктураСтрока.Вставить("КоличествоФакт", СтрокаТаблицы.КоличествоФакт);
				СтруктураСтрока.Вставить("КоличествоДокумент", СтрокаТаблицы.КоличествоДокумент);
				СтруктураСтрока.Вставить("Штрихкод", СтрокаТаблицы.Штрихкод);   
				СтруктураСтрока.Вставить("УпаковкаУИД", СтрокаТаблицы.УпаковкаУИД);
				СтруктураСтрока.Вставить("СерияУИД", СтрокаТаблицы.СерияУИД);
				МассивСтрокНоменклатуры.Добавить(СтруктураСтрока); 
				КоличествоДокумент = КоличествоДокумент + СтрокаТаблицы.КоличествоДокумент;          
				КоличествоФакт = КоличествоФакт + СтрокаТаблицы.КоличествоФакт;
			КонецЦикла;     
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);
			СтруктураДанных.data.Вставить("СписокНоменклатуры",МассивСтрокНоменклатуры);
			
			Если КоличествоДокумент <> КоличествоФакт Тогда
				СтруктураДанных.data.Вставить("ПроверкаУспешна", Ложь);
				Оповещение = Новый ОписаниеОповещения("ПриемкаМатериаловПроверкаКоличестваРасхождение", ЭтотОбъект, 
														Новый Структура("СтруктураДанных, УИД",СтруктураДанных,ЭтаФорма.УникальныйИдентификатор));
				ПоказатьВопрос(Оповещение, "Количество по документу не совпадает с фактическим. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Иначе  
				СтруктураДанных.data.Вставить("ПроверкаУспешна", Истина);
				ПриемкаМатериаловПроверкаКоличестваЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
			КонецЕслИ;
																
		ИначеЕсли ИмяКоманды = "ПриемкаМатериаловПроверкаКоличестваОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли;     
		
	ИначеЕсли Действие = "Размещение материалов" Тогда
		Если ИмяКоманды = "СброситьОтборПоЯчейкам" Тогда    
			ЭтаФорма.ТекущаяЯчейка = "";
			ЭтаФорма.ТекущаяЯчейкаШтрихкод = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие);  
		ИначеЕсли ИмяКоманды = "РазмещениеМатериаловЗавершить" Тогда 
			
			КоличествоРазмещено = 0;
			КоличествоДокумент = 0;
			МассивСтрокНоменклатуры = Новый Массив;
						
			Для Каждого СтрокаТаблицы Из ЭтаФорма.СписокНоменклатуры Цикл
				КоличествоРазмещено = КоличествоРазмещено + СтрокаТаблицы.КоличествоРазмещено;          
				КоличествоДокумент = КоличествоДокумент + СтрокаТаблицы.КоличествоДокумент;
			КонецЦикла;  
			
			Для Каждого СтрокаНоменклатуры из ЭтаФорма.СписокНоменклатурыПоЯчейкам Цикл  				
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("Номенклатура", СтрокаНоменклатуры.НоменклатураПоЯчейкам);
				СтрокаДанных.Вставить("Штрихкод", СтрокаНоменклатуры.ШтрихкодПоЯчейкам);
				СтрокаДанных.Вставить("Ячейка", СтрокаНоменклатуры.ЯчейкаПоЯчейкам);
				СтрокаДанных.Вставить("ШтрихкодЯчейки", СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам);
				СтрокаДанных.Вставить("Количество", СтрокаНоменклатуры.КоличествоПоЯчейкам);
				СтрокаДанных.Вставить("СерияУИД", СтрокаНоменклатуры.СерияУИДПоЯчейкам);
				СтрокаДанных.Вставить("УпаковкаУИД", СтрокаНоменклатуры.УпаковкаУИДПоЯчейкам);	
				МассивСтрокНоменклатуры.Добавить(СтрокаДанных);
			КонецЦикла;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("СписокНоменклатуры",МассивСтрокНоменклатуры);
			
			Если КоличествоДокумент <> КоличествоРазмещено Тогда
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Ложь);
				Оповещение = Новый ОписаниеОповещения("РазмещениеМатериаловРасхождение", ЭтотОбъект, 
														Новый Структура("СтруктураДанных, УИД",СтруктураДанных,ЭтаФорма.УникальныйИдентификатор));
				ПоказатьВопрос(Оповещение, "Количество по документу не совпадает с размещенным. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Иначе  
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Истина);
				РазмещениеМатериаловЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
			КонецЕслИ;

			
		ИначеЕсли ИмяКоманды = "РазмещениеМатериаловОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли; 
		
	ИначеЕсли Действие = "Отгрузка материалов в производство" Тогда
		
		Если ИмяКоманды = "СброситьОтборПоЯчейкам" Тогда    
			ЭтаФорма.ТекущаяЯчейка = "";
			ЭтаФорма.ТекущаяЯчейкаШтрихкод = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие);  
		ИначеЕсли ИмяКоманды = "ОтгрузкаМатериаловВПроизводствоЗавершить" Тогда 
			
			КоличествоОтобрано = 0;
			КоличествоДокумент = 0;
			МассивСтрокНоменклатуры = Новый Массив;
						
			Для Каждого СтрокаТаблицы Из ЭтаФорма.СписокНоменклатуры Цикл
				КоличествоОтобрано = КоличествоОтобрано + СтрокаТаблицы.КоличествоОтобрано;          
				КоличествоДокумент = КоличествоДокумент + СтрокаТаблицы.КоличествоДокумент;
			КонецЦикла;  
			
			Для Каждого СтрокаНоменклатуры из ЭтаФорма.СписокНоменклатурыПоЯчейкам Цикл  				
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("Номенклатура", СтрокаНоменклатуры.НоменклатураПоЯчейкам);
				СтрокаДанных.Вставить("Штрихкод", СтрокаНоменклатуры.ШтрихкодПоЯчейкам);
				СтрокаДанных.Вставить("Ячейка", СтрокаНоменклатуры.ЯчейкаПоЯчейкам);
				СтрокаДанных.Вставить("ШтрихкодЯчейки", СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам);
				СтрокаДанных.Вставить("Количество", СтрокаНоменклатуры.КоличествоПоЯчейкамОтобрано);
				СтрокаДанных.Вставить("СерияУИД", СтрокаНоменклатуры.СерияУИДПоЯчейкам);
				СтрокаДанных.Вставить("УпаковкаУИД", СтрокаНоменклатуры.УпаковкаУИДПоЯчейкам);	
				МассивСтрокНоменклатуры.Добавить(СтрокаДанных);
			КонецЦикла;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("СписокНоменклатуры",МассивСтрокНоменклатуры);
			
			Если КоличествоДокумент <> КоличествоОтобрано Тогда
				СтруктураДанных.data.Вставить("ОтобраноУспешно", Ложь);
				Оповещение = Новый ОписаниеОповещения("ОтгрузкаМатериаловВПроизводствоРасхождение", ЭтотОбъект, 
														Новый Структура("СтруктураДанных, УИД",СтруктураДанных,ЭтаФорма.УникальныйИдентификатор));
				ПоказатьВопрос(Оповещение, "Количество по документу не совпадает с отобранным. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Иначе  
				СтруктураДанных.data.Вставить("ОтобраноУспешно", Истина);
				ОтгрузкаМатериаловВПроизводствоЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
			КонецЕслИ;

			
		ИначеЕсли ИмяКоманды = "ОтгрузкаМатериаловВПроизводствоОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли; 
		
	ИначеЕсли Действие = "Приемка продукции" Тогда
			
		Если ИмяКоманды = "ПриемкаПродукцииЗавершить" Тогда 
			
			МассивСтрокНоменклатуры = Новый Массив;
									
			Для Каждого СтрокаНоменклатуры из ЭтаФорма.СписокНоменклатурыПринято Цикл  				
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("Номенклатура", СтрокаНоменклатуры.НоменклатураПринято);
				СтрокаДанных.Вставить("Штрихкод", СтрокаНоменклатуры.ШтрихкодПринято);
				СтрокаДанных.Вставить("Количество", СтрокаНоменклатуры.КоличествоПринято);
				МассивСтрокНоменклатуры.Добавить(СтрокаДанных);
			КонецЦикла;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("СписокНоменклатуры",МассивСтрокНоменклатуры);
			
			ПриемкаПродукцииЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
		
		ИначеЕсли ИмяКоманды = "ПриемкаПродукцииОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли;		
		
	ИначеЕсли Действие = "Упаковка продукции" Тогда
		
		Если ИмяКоманды = "СброситьОтборПоУпаковке" Тогда    
			ЭтаФорма.ТекущаяУпаковка= "";
			ЭтаФорма.ТекущаяУпаковкаКод = "";    
			ЭтаФорма.ТекущаяУпаковкаУИДУпаковки = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие); 	
		ИначеЕсли ИмяКоманды = "УпаковкаПродукцииЗавершить" Тогда 
			
			ЭтаФорма.ТекущаяУпаковка= "";
			ЭтаФорма.ТекущаяУпаковкаКод = "";    
			ЭтаФорма.ТекущаяУпаковкаУИДУпаковки = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие); 
			ОтрисоватьДеревоПоТаблице(ЭтаФорма,Действие);	
			
			ЭлементыДерева = ЭтаФорма.ДеревоКодов.ПолучитьЭлементы();   
			Отказ = Ложь; 
			
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				
				Если Отказ Тогда 
					Прервать;
				КонецЕсли;
				
				Если ЭлементДерева.ВУпаковкеДеревоКодов <> ЭлементДерева.УпакованоДеревоКодов Тогда
					Отказ = Истина;
				КонецЕсли;      
				
				ЭлементыЭлемента = ЭлементДерева.ПолучитьЭлементы();
				
				Для Каждого Элемент из ЭлементыЭлемента Цикл  
					ПроверитьКомплектностьИерархически(Элемент, Отказ);
				КонецЦикла;
				
			КонецЦикла;  
			
			Если Отказ Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Дробное указание упаковок не допустимо";
				Сообщение.Сообщить();	
				Возврат;				
			КонецЕсли;
								
			МассивИспользованныхКодов = Новый Массив;
			
			Для Каждого СтрокаКодов из ЭтаФорма.ПулИспользованныхКодов Цикл   
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("Потомок", СтрокаКодов.ПотомокПулИспользованных);
				СтрокаДанных.Вставить("Родитель", СтрокаКодов.РодительПулИспользованных);
				СтрокаДанных.Вставить("ПредставлениеПотомка", СтрокаКодов.ПредставлениеПотомкаПулИспользованных);
				СтрокаДанных.Вставить("ПредставлениеРодителя", СтрокаКодов.ПредставлениеРодителяПулИспользованных);  
				МассивИспользованныхКодов.Добавить(СтрокаДанных);
			КонецЦикла;     
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("ПулИспользованныхКодов",МассивИспользованныхКодов);
			
			УпаковкаПродукцииЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);
					
		ИначеЕсли ИмяКоманды = "УпаковкаПродукцииОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли;		
		
	ИначеЕсли Действие = "Размещение продукции" Тогда
		
		Если ИмяКоманды = "СброситьОтборПоЯчейкам" Тогда    
			ЭтаФорма.ТекущаяЯчейка = "";
			ЭтаФорма.ТекущаяЯчейкаШтрихкод = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие);  
		ИначеЕсли ИмяКоманды = "РазмещениеПродукцииЗавершить" Тогда 
			
			КоличествоРазмещено = 0;
			КоличествоДокумент = 0;
			МассивСтрокКодов = Новый Массив;
						
			Для Каждого СтрокаТаблицы Из ЭтаФорма.СписокНоменклатуры Цикл
				КоличествоРазмещено = КоличествоРазмещено + СтрокаТаблицы.КоличествоРазмещено;          
				КоличествоДокумент = КоличествоДокумент + СтрокаТаблицы.КоличествоДокумент;
			КонецЦикла;  
			
			Для Каждого СтрокаНоменклатуры из ЭтаФорма.ПулИспользованныхКодов Цикл  				
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("КодЯчейки",СтрокаНоменклатуры.ШтрихкодЯчейкиПулИспользованных);
				СтрокаДанных.Вставить("КодПродукции", СтрокаНоменклатуры.КодПродукцииПулИспользованных); 
				МассивСтрокКодов.Добавить(СтрокаДанных);
			КонецЦикла;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("ПулИспользованныхКодов",МассивСтрокКодов);
			
			Если КоличествоДокумент <> КоличествоРазмещено Тогда
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Ложь);
				Оповещение = Новый ОписаниеОповещения("РазмещениеПродукцииРасхождение", ЭтотОбъект, 
														Новый Структура("СтруктураДанных, УИД",СтруктураДанных,ЭтаФорма.УникальныйИдентификатор));
				ПоказатьВопрос(Оповещение, "Количество по документу не совпадает с размещенным. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Иначе  
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Истина);
				РазмещениеПродукцииЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
			КонецЕслИ;

			
		ИначеЕсли ИмяКоманды = "РазмещениеПродукцииОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли; 
		
	ИначеЕсли Действие = "Произвольное размещение" Тогда
		
		Если ИмяКоманды = "СброситьОтборПоЯчейкам" Тогда    
			ЭтаФорма.ТекущаяЯчейка = "";
			ЭтаФорма.ТекущаяЯчейкаШтрихкод = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие);  
		ИначеЕсли ИмяКоманды = "ПроизвольноеРазмещениеЗавершить" Тогда 
			
			КоличествоРазмещено = 0;
			КоличествоДокумент = 0;
			МассивСтрокКодов = Новый Массив;
						
			Для Каждого СтрокаТаблицы Из ЭтаФорма.СписокНоменклатуры Цикл
				КоличествоРазмещено = КоличествоРазмещено + СтрокаТаблицы.КоличествоРазмещено;          
				КоличествоДокумент = КоличествоДокумент + СтрокаТаблицы.КоличествоДокумент;
			КонецЦикла;  
			
			Для Каждого СтрокаНоменклатуры из ЭтаФорма.ПулИспользованныхКодов Цикл  				
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("КодЯчейки",СтрокаНоменклатуры.ШтрихкодЯчейкиПулИспользованных);
				СтрокаДанных.Вставить("КодПродукции", СтрокаНоменклатуры.КодПродукцииПулИспользованных); 
				МассивСтрокКодов.Добавить(СтрокаДанных);
			КонецЦикла;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("ПулИспользованныхКодов",МассивСтрокКодов);
			
			Если КоличествоДокумент <> КоличествоРазмещено Тогда
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Ложь);
				Оповещение = Новый ОписаниеОповещения("ПроизвольноеРазмещениеРасхождение", ЭтотОбъект, 
														Новый Структура("СтруктураДанных, УИД",СтруктураДанных,ЭтаФорма.УникальныйИдентификатор));
				ПоказатьВопрос(Оповещение, "Количество по документу не совпадает с размещенным. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Иначе  
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Истина);
				ПроизвольноеРазмещениеЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
			КонецЕслИ;

			
		ИначеЕсли ИмяКоманды = "ПроизвольноеРазмещениеОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли;
		
	ИначеЕсли Действие = "Произвольный отбор" Тогда
		
		Если ИмяКоманды = "СброситьОтборПоЯчейкам" Тогда    
			ЭтаФорма.ТекущаяЯчейка = "";
			ЭтаФорма.ТекущаяЯчейкаШтрихкод = "";
			ОтрисоватьДеревоПоТаблице(ЭтаФорма, Действие);  
		ИначеЕсли ИмяКоманды = "ПроизвольныйОтборЗавершить" Тогда 
			
			КоличествоОтобрано = 0;
			КоличествоДокумент = 0;
			МассивСтрокКодов = Новый Массив;
						
			Для Каждого СтрокаТаблицы Из ЭтаФорма.СписокНоменклатуры Цикл
				КоличествоОтобрано = КоличествоОтобрано + СтрокаТаблицы.КоличествоОтобрано;          
				КоличествоДокумент = КоличествоДокумент + СтрокаТаблицы.КоличествоДокумент;
			КонецЦикла;  
			
			Для Каждого СтрокаНоменклатуры из ЭтаФорма.ПулИспользованныхКодов Цикл  				
				СтрокаДанных = Новый Структура;
				СтрокаДанных.Вставить("КодЯчейки",СтрокаНоменклатуры.ШтрихкодЯчейкиПулИспользованных);
				СтрокаДанных.Вставить("КодПродукции", СтрокаНоменклатуры.КодПродукцииПулИспользованных); 
				МассивСтрокКодов.Добавить(СтрокаДанных);
			КонецЦикла;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("action", Действие);
			СтруктураДанных.Вставить("actionitem", Предмет);
			СтруктураДанных.Вставить("command", ИмяКоманды);
			СтруктураДанных.Вставить("data", Новый Структура);    		
			СтруктураДанных.data.Вставить("ПулИспользованныхКодов",МассивСтрокКодов);
			
			Если КоличествоДокумент <> КоличествоОтобрано Тогда
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Ложь);
				Оповещение = Новый ОписаниеОповещения("ПроизвольныйОтборРасхождение", ЭтотОбъект, 
														Новый Структура("СтруктураДанных, УИД",СтруктураДанных,ЭтаФорма.УникальныйИдентификатор));
				ПоказатьВопрос(Оповещение, "Количество по документу не совпадает с размещенным. Продолжить?",РежимДиалогаВопрос.ДаНет);
			Иначе  
				СтруктураДанных.data.Вставить("РазмещеноУспешно", Истина);
				ПроизвольныйОтборЗавершение(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);	
			КонецЕслИ;

			
		ИначеЕсли ИмяКоманды = "ПроизвольныйОтборОтменить" Тогда
			Оповещение = Новый ОписаниеОповещения("ОтменаДействия", ЭтотОбъект, Новый Структура("УИД", ЭтаФорма.УникальныйИдентификатор));
			ПоказатьВопрос(Оповещение, "Отменить операцию?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Действие не описано";
			Сообщение.Сообщить();	
		КонецЕсли;	
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Действие не описано";
		Сообщение.Сообщить();	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс 


&НаКлиенте
Процедура ПроверитьКомплектностьИерархически(Элемент, Отказ)     
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.УпакованоДеревоКодов <> Элемент.ВУпаковкеДеревоКодов Тогда 
		Отказ = Истина;			
	КонецЕсли;   
	
	ЭлементыЭлемента = Элемент.ПолучитьЭлементы();	
	Для Каждого ЭлементЭлемента из ЭлементыЭлемента Цикл  
		ПроверитьКомплектностьИерархически(ЭлементЭлемента, Отказ);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаМатериаловПроверкаКоличестваРасхождение(Результат, ДополнительныеПараметры) Экспорт   
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПриемкаМатериаловПроверкаКоличестваЗавершение(ДополнительныеПараметры.СтруктураДанных, ДополнительныеПараметры.УИД);
	КонецЕсли;
	
КонецПроцедуры     

&НаКлиенте
Процедура ПриемкаМатериаловПроверкаКоличестваЗавершение(СтруктураДанных, УИДФормы)
	
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  	 
		
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеМатериаловРасхождение(Результат, ДополнительныеПараметры) Экспорт   
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РазмещениеМатериаловЗавершение(ДополнительныеПараметры.СтруктураДанных, ДополнительныеПараметры.УИД);
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура РазмещениеМатериаловЗавершение(СтруктураДанных, УИДФормы)
	
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  	 
		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаМатериаловВПроизводствоРасхождение(Результат, ДополнительныеПараметры) Экспорт  
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ОтгрузкаМатериаловВПроизводствоЗавершение(ДополнительныеПараметры.СтруктураДанных, ДополнительныеПараметры.УИД);
	КонецЕсли;	
	
КонецПроцедуры      

&НаКлиенте
Процедура ОтгрузкаМатериаловВПроизводствоЗавершение(СтруктураДанных, УИДФормы)  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаПродукцииЗавершение(СтруктураДанных, УидФормы)  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПродукцииЗавершение(СтруктураДанных, УидФормы)  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеПродукцииРасхождение(Результат, ДополнительныеПараметры) Экспорт  
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РазмещениеПродукцииЗавершение(ДополнительныеПараметры.СтруктураДанных, ДополнительныеПараметры.УИД);
	КонецЕсли;	
	
КонецПроцедуры    

&НаКлиенте
Процедура РазмещениеПродукцииЗавершение(СтруктураДанных, УидФормы)  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольноеРазмещениеРасхождение(Результат, ДополнительныеПараметры) Экспорт  
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПроизвольноеРазмещениеЗавершение(ДополнительныеПараметры.СтруктураДанных, ДополнительныеПараметры.УИД);
	КонецЕсли;	
	
КонецПроцедуры    

&НаКлиенте
Процедура ПроизвольноеРазмещениеЗавершение(СтруктураДанных, УидФормы)  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйОтборРасхождение(Результат, ДополнительныеПараметры) Экспорт  
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПроизвольныйОтборЗавершение(ДополнительныеПараметры.СтруктураДанных, ДополнительныеПараметры.УИД);
	КонецЕсли;	
	
КонецПроцедуры    

&НаКлиенте
Процедура ПроизвольныйОтборЗавершение(СтруктураДанных, УидФормы)  
	
	ТекущееПодключение = SS_СлужебныйСервер.ВернутьТекущееПодключниеКбазе();
	Соединение = ПолучитьСоединениеСБазой(ТекущееПодключение);
	ЗапросHTTP = ПолучитьHTTPЗапрос();
	ЗапросHTTP.АдресРесурса = ТекущееПодключение.ПараметрыПодключения.ИмяБазы+"/hs/tsd/command";
	ЗапросHTTP.УстановитьТелоИзСтроки(СформироватьТекстJSON(СтруктураДанных));
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);  
	
	Если Ответ.КодСостояния = 200 Тогда     
				
		ПолученныеДанные = SS_СлужебныйКлиентСервер.ПрочитатьТелоJSON(Ответ);
		Если ПолученныеДанные.status = "success" Тогда       
			
			Оповестить("ЗакрытиеФормыДействия",УИДФормы);			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();	
									
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПолученныеДанные.message;
			Сообщение.Сообщить();
		КонецЕсли;  
		
	Иначе   
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка подключения. Код ответа "+Ответ.КодСостояния;
		Сообщение.Сообщить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаДействия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповестить("ЗакрытиеФормыДействия", ДополнительныеПараметры.УИД);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоединениеСБазой(База, АвторизацияОС = Ложь) Экспорт
	
	Если ТипЗнч(База) = Тип("Структура") и База.Свойство("ПараметрыПодключения") Тогда
		
		Сервер = База.ПараметрыПодключения.Сервер;
		ИДТерминала = База.ПараметрыПодключения.ИДТерминала;
		ПарольТерминала = База.ПараметрыПодключения.ПарольТерминала;			
		
	Иначе
		
		Сервер = База.Сервер;
		ИДТерминала = База.ИДТерминала;
		ПарольТерминала = База.ПарольТерминала;	
			
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(Сервер,
									  ,
									  ИДТерминала,
									  ПарольТерминала,
									  ,
									  ,
									  Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено),
									  АвторизацияОС);	
	
	Возврат Соединение;
	
	
КонецФункции    

Функция ПолучитьHTTPЗапрос() Экспорт    
	
	Запрос = Новый HTTPЗапрос;  
	Запрос.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	Возврат Запрос;
		
КонецФункции

Функция ПрочитатьТелоJSON(HTTPЗапрос) Экспорт  
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(HTTPЗапрос.ПолучитьТелоКакСтроку());
	ПолученныеДанные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();    
	Возврат ПолученныеДанные;
	
КонецФункции

Функция СформироватьТекстJSON(СтруктураДанных) Экспорт 
	
	JSON = Новый ЗаписьJSON;
	JSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет)); 
	ЗаписатьJSON(JSON,СтруктураДанных);  
	Текст = JSON.Закрыть();
	Возврат Текст;
	
КонецФункции

Процедура ОбработатьВВодШтрихкода(Форма, Штрихкод, Действие = Неопределено, Предмет = Неопределено) Экспорт  
	
	Если Действие = "ВводШтрихкода" Тогда		
		Форма.ЗакрытьФормуИВернутьШтрихкод(Штрихкод);
	ИначеЕсли Действие = "Поиск документа по штрихкоду" Тогда
				
		Для Каждого СтрокаДокумент из Форма.СписокДокументов Цикл				
			Если СтрокаДокумент.КодДокумента = Штрихкод Тогда
				SS_СлужебныйКлиентСервер.ОбработатьСобытиеСписокДокументовВыбор(Форма, Форма.Параметры.Действие, СтрокаДокумент.Номер);
				Прервать;		
			КонецЕсли;				
		КонецЦикла;      
		
	ИначеЕсли Действие = "Приемка материалов" тогда
		
		Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатуры Цикл
			
			Если СтрокаНоменклатуры.Штрихкод = Штрихкод Тогда
				
				Если Форма.РежимСканирования = 1 Тогда
					Если СтрокаНоменклатуры.КоличествоФакт<СтрокаНоменклатуры.КоличествоДокумент Тогда
						СтрокаНоменклатуры.КоличествоФакт = СтрокаНоменклатуры.КоличествоФакт+1;     
					КонецЕсли;
				ИначеЕсли Форма.РежимСканирования = 0 Тогда
					Если СтрокаНоменклатуры.КоличествоФакт > 0 Тогда					
						СтрокаНоменклатуры.КоличествоФакт = СтрокаНоменклатуры.КоличествоФакт-1;
					КонецЕсли;
				КонецЕсли;
				
				Прервать					
			КонецЕсли;			
		КонецЦикла;						
	ИначеЕсли Действие = "Размещение материалов" тогда
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаРазмещено"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаРазмещено"] 	
		КонецЕсли;
		
		ТипШтрихкодаУпр = ОпределитьТипШтрихкода(Штрихкод);	
		
		Если ТипШтрихкодаУпр = "Штрихкод+Серия" Тогда 
			
			Если Не ЗначениеЗаполнено(Форма.ТекущаяЯчейка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ячейка не открыта";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;    
			
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатуры Цикл
				
				Если СтрокаНоменклатуры.Штрихкод = Штрихкод Тогда 
					
					Для Каждого СтрокаПоЯчейкам из Форма.СписокНоменклатурыПоЯчейкам Цикл
						Если СтрокаПоЯчейкам.ШтрихкодПоЯчейкам = Штрихкод и СтрокаПоЯчейкам.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод Тогда
							ИскомаяСтрока = СтрокаПоЯчейкам;
							Прервать;
						КонецЕсли;
					КонецЦикла;      
					
					Если ИскомаяСтрока = Неопределено Тогда
						Если Форма.РежимСканирования = 1 Тогда
							Если СтрокаНоменклатуры.КоличествоРазмещено < СтрокаНоменклатуры.КоличествоДокумент Тогда
	                        	ИскомаяСтрока = Форма.СписокНоменклатурыПоЯчейкам.Добавить();
								ИскомаяСтрока.ЯчейкаПоЯчейкам = Форма.ТекущаяЯчейка;
								ИскомаяСтрока.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод;
								ИскомаяСтрока.НоменклатураПоЯчейкам = СтрокаНоменклатуры.Номенклатура;
								ИскомаяСтрока.ШтрихкодПоЯчейкам = Штрихкод;
								ИскомаяСтрока.СерияУИДПоЯчейкам = СтрокаНоменклатуры.СерияУИД;
								ИскомаяСтрока.УпаковкаУИДПоЯчейкам = СтрокаНоменклатуры.УпаковкаУИД;  
								ИскомаяСтрока.КоличествоПоЯчейкам = 1;	
								
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено + 1;  
								
							КонецЕсли;
						КонецЕсли;     
					Иначе
						Если Форма.РежимСканирования = 0 Тогда
							Если СтрокаНоменклатуры.КоличествоРазмещено > 0 Тогда
								ИскомаяСтрока.КоличествоПоЯчейкам = ИскомаяСтрока.КоличествоПоЯчейкам - 1;
								Если ИскомаяСтрока.КоличествоПоЯчейкам = 0 Тогда
									Форма.СписокНоменклатурыПоЯчейкам.Удалить(ИскомаяСтрока);	
								КонецЕсли;    
								
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено - 1;							
							КонецЕсли;
						ИначеЕсли Форма.РежимСканирования = 1 Тогда  
							Если СтрокаНоменклатуры.КоличествоРазмещено < СтрокаНоменклатуры.КоличествоДокумент Тогда
								ИскомаяСтрока.КоличествоПоЯчейкам = ИскомаяСтрока.КоличествоПоЯчейкам + 1;							
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено + 1;								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
										
					Прервать;					
				КонецЕсли; 
				
			КонецЦикла;  
			
			//ОтрисоватьДеревоПоТаблице(Форма, Действие);
						
		ИначеЕсли ТипШтрихкодаУпр = "Ячейка" Тогда
			
			Если Форма.ТекущаяЯчейкаШтрихкод <> Штрихкод Тогда
				ЯчейкаНайдена = ОбработатьСменуЯчейки(Форма, Штрихкод, Действие);
				//ОтрисоватьДеревоПоТаблице(Форма, Действие);				
				
				Если Не ЯчейкаНайдена Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Неизвестный штрихкод ячейки";
					Сообщение.Сообщить();	
					Возврат;		
				КонецЕсли;     
				
				Для Каждого СтрокаПоЯчейкам из Форма.СписокНоменклатурыПоЯчейкам Цикл
					Если СтрокаПоЯчейкам.ШтрихкодПоЯчейкам = Штрихкод и СтрокаПоЯчейкам.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод Тогда
						ИскомаяСтрока = СтрокаПоЯчейкам;
						Прервать;
					КонецЕсли;
				КонецЦикла;       
												
			КонецЕсли;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестный тип штрихкода";
			Сообщение.Сообщить();
		КонецЕсли;     
		
		ОтрисоватьДеревоПоТаблице(Форма, Действие);	
		
	ИначеЕсли Действие = "Отгрузка материалов в производство" Тогда     
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаОтобрано"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаОтобрано"] 	
		КонецЕсли;	  
		
		
		ТипШтрихкодаУпр = ОпределитьТипШтрихкода(Штрихкод);	
		
		Если ТипШтрихкодаУпр = "Штрихкод+Серия" Тогда 
			
			Если Не ЗначениеЗаполнено(Форма.ТекущаяЯчейка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ячейка не открыта";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;  
			
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатуры Цикл
				
				Если СтрокаНоменклатуры.Штрихкод = Штрихкод Тогда 
					
					Для Каждого СтрокаПоЯчейкам из Форма.СписокНоменклатурыПоЯчейкам Цикл
						Если СтрокаПоЯчейкам.ШтрихкодПоЯчейкам = Штрихкод и СтрокаПоЯчейкам.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод Тогда
							ИскомаяСтрока = СтрокаПоЯчейкам;
							Прервать;
						КонецЕсли;
					КонецЦикла;      
					 
					Если ИскомаяСтрока <> Неопределено Тогда
						Если Форма.РежимСканирования = 0 Тогда
							Если СтрокаНоменклатуры.КоличествоОтобрано > 0 Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамОтобрано = ИскомаяСтрока.КоличествоПоЯчейкамОтобрано - 1; 								
								СтрокаНоменклатуры.КоличествоОтобрано = СтрокаНоменклатуры.КоличествоОтобрано - 1;							
							КонецЕсли;
						ИначеЕсли Форма.РежимСканирования = 1 Тогда  
							Если СтрокаНоменклатуры.КоличествоОтобрано < СтрокаНоменклатуры.КоличествоДокумент Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамОтобрано = ИскомаяСтрока.КоличествоПоЯчейкамОтобрано + 1;							
								СтрокаНоменклатуры.КоличествоОтобрано = СтрокаНоменклатуры.КоличествоОтобрано + 1;								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
														
					Прервать;					
				КонецЕсли; 				
			КонецЦикла;  
			
			//ОтрисоватьДеревоПоТаблице(Форма, Действие);
												
		ИначеЕсли ТипШтрихкодаУпр = "Ячейка" Тогда
			
			Если Форма.ТекущаяЯчейкаШтрихкод <> Штрихкод Тогда
				ЯчейкаНайдена = ОбработатьСменуЯчейки(Форма, Штрихкод, Действие);
				//ОтрисоватьДеревоПоТаблице(Форма, Действие);				
				
				Если Не ЯчейкаНайдена Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Неизвестный штрихкод ячейки";
					Сообщение.Сообщить();	
					Возврат;		
				КонецЕсли;   
				
			КонецЕсли;
					
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестный тип штрихкода";
			Сообщение.Сообщить();			
		КонецЕсли;
		
		ОтрисоватьДеревоПоТаблице(Форма, Действие);	
		
	ИначеЕсли Действие = "Приемка продукции" тогда  
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаПринято"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаПринято"] 	
		КонецЕсли;

		
		Для Каждого СтрокаШтрихкодов из Форма.ШтрихкодыНоменклатуры Цикл								
			Если СтрокаШтрихкодов.Штрихкод = Штрихкод Тогда										
				Если Форма.РежимСканирования = 1 Тогда
					
					ИскомаяСтрока = "";
					Для Каждого СтрокаПринято из Форма.СписокНоменклатурыПринято Цикл
						Если СтрокаПринято.ШтрихкодПринято = Штрихкод Тогда
							ИскомаяСтрока = СтрокаПринято;	 
							Прервать;
						КонецЕсли;
					КонецЦикла;   
					
					Если ИскомаяСтрока = "" Тогда
						ИскомаяСтрока = Форма.СписокНоменклатурыПринято.Добавить();
						ИскомаяСтрока.НоменклатураПринято = СтрокаШтрихкодов.НоменклатураШтрихкоды;   
						ИскомаяСтрока.ШтрихкодПринято = Штрихкод;
					КонецЕсли;                                   
					
					ИскомаяСтрока.КоличествоПринято = ИскомаяСтрока.КоличествоПринято+1; 
					
					Для Каждого СтрокаПринять из Форма.СписокНоменклатуры Цикл
						Если СтрокаПринять.НоменклатураУИД = СтрокаШтрихкодов.НоменклатураУИДШтрихкоды И
							 СтрокаПринять.ХарактеристикаУИД = СтрокаШтрихкодов.ХарактеристикаУИДШтрихкоды Тогда 
							 СтрокаПринять.КоличествоФакт = СтрокаПринять.КоличествоФакт + СтрокаШтрихкодов.КоличествоЕдиниц;
							 Прервать;	
						КонецЕсли;								 
					КонецЦикла;

											
				Иначе
					
					ИскомаяСтрока = "";
					Для Каждого СтрокаПринято из Форма.СписокНоменклатурыПринято Цикл
						Если СтрокаПринято.ШтрихкодПринято = Штрихкод Тогда
							ИскомаяСтрока = СтрокаПринято;	 
							Прервать;
						КонецЕсли;
					КонецЦикла;   
					
					Если ИскомаяСтрока <> "" Тогда
						ИскомаяСтрока.КоличествоПринято = ИскомаяСтрока.КоличествоПринято-1;
						
						Если ИскомаяСтрока.КоличествоПринято = 0 Тогда
							Форма.СписокНоменклатурыПринято.Удалить(ИскомаяСтрока);		
						КонецЕсли;
						
						Для Каждого СтрокаПринять из Форма.СписокНоменклатуры Цикл
							Если СтрокаПринять.НоменклатураУИД = СтрокаШтрихкодов.НоменклатураУИДШтрихкоды И
								 СтрокаПринять.ХарактеристикаУИД = СтрокаШтрихкодов.ХарактеристикаУИДШтрихкоды Тогда 
								 СтрокаПринять.КоличествоФакт = СтрокаПринять.КоличествоФакт - СтрокаШтрихкодов.КоличествоЕдиниц;
								 Прервать;	
							КонецЕсли;									 
						КонецЦикла;							
					КонецЕсли;						
				КонецЕсли;
				
				Прервать;
			КонецЕсли;					
		КонецЦикла;	
		
	ИначеЕсли Действие = "Упаковка продукции" тогда
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаУпаковано"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаУпаковано"]; 	
		КонецЕсли;    
		
		
		Если Форма.РежимСканирования = 1 Тогда 
			
			Для Каждого СтрокаКодов из Форма.ПулКодовПродукции Цикл			
				
				Если СтрокаКодов.КодПродукцииПулКодов = Штрихкод Тогда
					
					Если ЗначениеЗаполнено(Форма.ТекущаяУпаковкаКод) Тогда
						
						Если СтрокаКодов.УпаковкаУИДПулКодов = Форма.ТекущаяУпаковкаУИДУпаковки Тогда
							Прервать;
						КонецЕсли;
						
						ВозможныеУпаковки = Форма.ИерархияУпаковок.НайтиСтроки(Новый Структура("СостоитИзУИДИерархия", СтрокаКодов.УпаковкаУИДПулКодов));
						
						УпаковкаПодходит = Ложь;
						Для Каждого ВозможнаяУпаковка из ВозможныеУпаковки Цикл
							Если ВозможнаяУпаковка.УпаковкаУИДИерархия = Форма.ТекущаяУпаковкаУИДУпаковки Тогда
								УпаковкаПодходит = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;  
						
						Если Не УпаковкаПодходит Тогда 
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаКодов.ИспользованоПулКодов Тогда
						ИскомыеСтрокиПулаИспользованных = Форма.ПулИспользованныхКодов.НайтиСтроки(Новый Структура("ПотомокПулИспользованных", Штрихкод));
						ИскомаяСтрокаПулаИспользованных = ИскомыеСтрокиПулаИспользованных[0]; 										
					Иначе                                                                    
						
						
						Если ЗначениеЗаполнено(Форма.ТекущаяУпаковкаКод) Тогда
							КоличествоПотомков = Форма.ПулИспользованныхКодов.НайтиСтроки(Новый Структура("РодительПулИспользованных", Форма.ТекущаяУпаковкаКод)).Количество(); 
							Если КоличествоПотомков>=Форма.ТекущаяУпаковкаВУпаковке Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаКодов.ИспользованоПулКодов = Истина;
						ИскомаяСтрокаПулаИспользованных = Форма.ПулИспользованныхКодов.Добавить();
						ИскомаяСтрокаПулаИспользованных.ПотомокПулИспользованных = Штрихкод;
						ИскомаяСтрокаПулаИспользованных.ПредставлениеПотомкаПулИспользованных = СтрокаКодов.ПредставлениеДеревоПулКодов;	
						ИскомаяСтрокаПулаИспользованных.ВУпаковкеПулИспользованных = СтрокаКодов.ВУпаковкеПулКодов;
						ИскомаяСтрокаПулаИспользованных.УпаковкаУИДПулИспользованных = СтрокаКодов.УпаковкаУИДПулКодов;      
						
						Для Каждого СтрокаАналитики из Форма.АналитикаКУказанию	Цикл
							Если СтрокаАналитики.АналитикаАналитика = СтрокаКодов.ПредставлениеПулКодов Тогда
								СтрокаАналитики.КоличествоУказаноАналитика = СтрокаАналитики.КоличествоУказаноАналитика+1;
								Прервать;		
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;     
					
					ИскомаяСтрокаПулаИспользованных.РодительПулИспользованных = Форма.ТекущаяУпаковкаКод;
					ИскомаяСтрокаПулаИспользованных.ПредставлениеРодителяПулИспользованных = Форма.ТекущаяУпаковка;  
					
					Если Сред(Штрихкод,1,1) = "P" Тогда
						Форма.ТекущаяУпаковкаКод = Штрихкод;
						Форма.ТекущаяУпаковка = СтрокаКодов.ПредставлениеДеревоПулКодов; 
						Форма.ТекущаяУпаковкаУИДУпаковки = СтрокаКодов.УпаковкаУИДПулКодов; 
						Форма.ТекущаяУпаковкаВУпаковке = СтрокаКодов.ВУпаковкеПулКодов;
					КонецЕсли;	
					
					Прервать;	
				КонецЕсли; 
				
			КонецЦикла;  
			
		Иначе 
			
		
			МассивСтрокПулаИспользованныхКодов = Форма.ПулИспользованныхКодов.НайтиСтроки(Новый Структура("РодительПулИспользованных", Форма.ТекущаяУпаковкаКод)); 		  			
			МассивУдаляемыхСтрок = Новый Массив;
			
			Для Каждого СтрокаПула из МассивСтрокПулаИспользованныхКодов Цикл
				Если СтрокаПула.ПотомокПулИспользованных = Штрихкод Тогда 
					МассивУдаляемыхСтрок.Добавить(СтрокаПула);
					ДополнитьМассивИерархией(СтрокаПула.ПотомокПулИспользованных, Форма.ПулИспользованныхКодов, МассивУдаляемыхСтрок);
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для Каждого СтрокаМассива Из МассивУдаляемыхСтрок Цикл 
				
				Для Каждого СтрокаПула из Форма.ПулКодовПродукции Цикл
					Если СтрокаПула.КодПродукцииПулКодов = СтрокаМассива.ПотомокПулиспользованных Тогда
						СтрокаПула.ИспользованоПулКодов = Ложь;
						
						Для Каждого СтрокаАналитики из Форма.АналитикаКУказанию	Цикл
							Если СтрокаАналитики.АналитикаАналитика = СтрокаПула.ПредставлениеПулКодов Тогда
								СтрокаАналитики.КоличествоУказаноАналитика = СтрокаАналитики.КоличествоУказаноАналитика-1;
								Прервать;		
							КонецЕсли;
						КонецЦикла;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
							
				Форма.ПулИспользованныхКодов.Удалить(СтрокаМассива);	
			КонецЦикла;
			
		КонецЕсли;
		
		ОтрисоватьДеревоПоТаблице(Форма, Действие);
		
	ИначеЕсли Действие = "Размещение продукции" Тогда     
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаРазмещено"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаРазмещено"]; 	
		КонецЕсли;	  
				
		ТипШтрихкодаУпр = ОпределитьТипШтрихкода(Штрихкод);	
		
		Если ТипШтрихкодаУпр = "Код продукции" Тогда 
			
			Если Не ЗначениеЗаполнено(Форма.ТекущаяЯчейка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ячейка не открыта";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;  
			
			ИскомаяСтрокаПула = "";
			Для Каждого СтрокаПула Из Форма.ПулКодовПродукции Цикл
				Если СтрокаПула.КодПродукцииПулКодов = Штрихкод Тогда
					ИскомаяСтрокаПула = СтрокаПула;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИскомаяСтрокаПула = "" Тогда  
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестный код продукции";
				Сообщение.Сообщить();	
				Возврат;	
			КонецЕсли;          
			
			Если ИскомаяСтрокаПула.ИспользованоПулКодов и Форма.РежимСканирования = 1 Тогда     
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Код уже размещен";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;
			
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатуры Цикл
				
				Если СтрокаНоменклатуры.КлючСписокНоменклатуры = ИскомаяСтрокаПула.КлючПулКодов Тогда 
					
					Для Каждого СтрокаПоЯчейкам из Форма.СписокНоменклатурыПоЯчейкам Цикл
						Если СтрокаПоЯчейкам.КлючПоЯчейкам = ИскомаяСтрокаПула.КлючПулКодов и СтрокаПоЯчейкам.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод Тогда
							ИскомаяСтрока = СтрокаПоЯчейкам;
							Прервать;
						КонецЕсли;
					КонецЦикла;      
					 
					Если ИскомаяСтрока <> Неопределено Тогда
						Если Форма.РежимСканирования = 0 Тогда
							Если СтрокаНоменклатуры.КоличествоРазмещено > 0 и ИскомаяСтрокаПула.ИспользованоПулКодов Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамРазмещено = ИскомаяСтрока.КоличествоПоЯчейкамРазмещено - 1; 								
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено - 1;	  
								
								Для Каждого СтрокаИспользованных из Форма.ПулИспользованныхКодов Цикл
									Если СтрокаИспользованных.КодПродукцииПулИспользованных = ИскомаяСтрокаПула.КодПродукцииПулКодов Тогда
										Форма.ПулИспользованныхКодов.Удалить(СтрокаИспользованных);	
										ИскомаяСтрокаПула.ИспользованоПулКодов = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						ИначеЕсли Форма.РежимСканирования = 1 и НЕ ИскомаяСтрокаПула.ИспользованоПулКодов Тогда  
							Если СтрокаНоменклатуры.КоличествоРазмещено < СтрокаНоменклатуры.КоличествоДокумент Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамРазмещено = ИскомаяСтрока.КоличествоПоЯчейкамРазмещено + 1;							
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено + 1;	
								
								ИскомаяСтрокаПула.ИспользованоПулКодов = Истина;
								СтрокаИспользованных = Форма.ПулИспользованныхКодов.Добавить();
								СтрокаИспользованных.ШтрихкодЯчейкиПулИспользованных = Форма.ТекущаяЯчейкаШтрихкод;
								СтрокаИспользованных.КодПродукцииПулИспользованных = ИскомаяСтрокаПула.КодПродукцииПулКодов; 
								СтрокаИспользованных.КлючПулИспользованных = ИскомаяСтрокаПула.КлючПулКодов;
								СтрокаИспользованных.ИндексКодаПулИспользованных = ИскомаяСтрокаПула.ИндексКодаПулКодов;
							
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
														
					Прервать;					
				КонецЕсли; 				
			КонецЦикла;  
			
			//ОтрисоватьДеревоПоТаблице(Форма, Действие);
												
		ИначеЕсли ТипШтрихкодаУпр = "Ячейка" Тогда
			
			Если Форма.ТекущаяЯчейкаШтрихкод <> Штрихкод Тогда
				ЯчейкаНайдена = ОбработатьСменуЯчейки(Форма, Штрихкод, Действие);
				//ОтрисоватьДеревоПоТаблице(Форма, Действие);				
				
				Если Не ЯчейкаНайдена Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Неизвестный штрихкод ячейки";
					Сообщение.Сообщить();	
					Возврат;		
				КонецЕсли;   
				
			КонецЕсли;
					
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестный тип штрихкода";
			Сообщение.Сообщить();			
		КонецЕсли;
		
		ОтрисоватьДеревоПоТаблице(Форма, Действие);  
		
	ИначеЕсли Действие = "Произвольное размещение" Тогда     
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаРазмещено"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаРазмещено"]; 	
		КонецЕсли;	  
				
		ТипШтрихкодаУпр = ОпределитьТипШтрихкода(Штрихкод);	
		
		Если ТипШтрихкодаУпр = "Код продукции" Тогда 
			
			Если Не ЗначениеЗаполнено(Форма.ТекущаяЯчейка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ячейка не открыта";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;  
			
			ИскомаяСтрокаПула = "";
			Для Каждого СтрокаПула Из Форма.ПулКодовПродукции Цикл
				Если СтрокаПула.КодПродукцииПулКодов = Штрихкод Тогда
					ИскомаяСтрокаПула = СтрокаПула;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИскомаяСтрокаПула = "" Тогда  
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестный код продукции";
				Сообщение.Сообщить();	
				Возврат;	
			КонецЕсли;          
			
			Если ИскомаяСтрокаПула.ИспользованоПулКодов и Форма.РежимСканирования = 1 Тогда     
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Код уже размещен";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;
			
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатуры Цикл
				
				Если СтрокаНоменклатуры.КлючСписокНоменклатуры = ИскомаяСтрокаПула.КлючПулКодов Тогда 
					
					Для Каждого СтрокаПоЯчейкам из Форма.СписокНоменклатурыПоЯчейкам Цикл
						Если СтрокаПоЯчейкам.КлючПоЯчейкам = ИскомаяСтрокаПула.КлючПулКодов и СтрокаПоЯчейкам.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод Тогда
							ИскомаяСтрока = СтрокаПоЯчейкам;
							Прервать;
						КонецЕсли;
					КонецЦикла;      
					 
					Если ИскомаяСтрока <> Неопределено Тогда
						Если Форма.РежимСканирования = 0 Тогда
							Если СтрокаНоменклатуры.КоличествоРазмещено > 0 и ИскомаяСтрокаПула.ИспользованоПулКодов Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамРазмещено = ИскомаяСтрока.КоличествоПоЯчейкамРазмещено - 1; 								
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено - 1;	  
								
								Для Каждого СтрокаИспользованных из Форма.ПулИспользованныхКодов Цикл
									Если СтрокаИспользованных.КодПродукцииПулИспользованных = ИскомаяСтрокаПула.КодПродукцииПулКодов Тогда
										Форма.ПулИспользованныхКодов.Удалить(СтрокаИспользованных);	
										ИскомаяСтрокаПула.ИспользованоПулКодов = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						ИначеЕсли Форма.РежимСканирования = 1 и НЕ ИскомаяСтрокаПула.ИспользованоПулКодов Тогда  
							Если СтрокаНоменклатуры.КоличествоРазмещено < СтрокаНоменклатуры.КоличествоДокумент Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамРазмещено = ИскомаяСтрока.КоличествоПоЯчейкамРазмещено + 1;							
								СтрокаНоменклатуры.КоличествоРазмещено = СтрокаНоменклатуры.КоличествоРазмещено + 1;	
								
								ИскомаяСтрокаПула.ИспользованоПулКодов = Истина;
								СтрокаИспользованных = Форма.ПулИспользованныхКодов.Добавить();
								СтрокаИспользованных.ШтрихкодЯчейкиПулИспользованных = Форма.ТекущаяЯчейкаШтрихкод;
								СтрокаИспользованных.КодПродукцииПулИспользованных = ИскомаяСтрокаПула.КодПродукцииПулКодов; 
								СтрокаИспользованных.КлючПулИспользованных = ИскомаяСтрокаПула.КлючПулКодов;
								СтрокаИспользованных.ИндексКодаПулИспользованных = ИскомаяСтрокаПула.ИндексКодаПулКодов;
							
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
														
					Прервать;					
				КонецЕсли; 				
			КонецЦикла;  
			
			//ОтрисоватьДеревоПоТаблице(Форма, Действие);
												
		ИначеЕсли ТипШтрихкодаУпр = "Ячейка" Тогда
			
			Если Форма.ТекущаяЯчейкаШтрихкод <> Штрихкод Тогда
				ЯчейкаНайдена = ОбработатьСменуЯчейки(Форма, Штрихкод, Действие);
				//ОтрисоватьДеревоПоТаблице(Форма, Действие);				
				
				Если Не ЯчейкаНайдена Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Неизвестный штрихкод ячейки";
					Сообщение.Сообщить();	
					Возврат;		
				КонецЕсли;   
				
			КонецЕсли;
					
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестный тип штрихкода";
			Сообщение.Сообщить();			
		КонецЕсли;
		
		ОтрисоватьДеревоПоТаблице(Форма, Действие);
		
	ИначеЕсли Действие = "Произвольный отбор" Тогда     
		
		Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница <> Форма.Элементы["СтраницаОтобрано"] Тогда
			Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы["СтраницаОтобрано"]; 	
		КонецЕсли;	  
				
		ТипШтрихкодаУпр = ОпределитьТипШтрихкода(Штрихкод);	
		
		Если ТипШтрихкодаУпр = "Код продукции" Тогда 
			
			Если Не ЗначениеЗаполнено(Форма.ТекущаяЯчейка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ячейка не открыта";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;  
			
			ИскомаяСтрокаПула = "";
			Для Каждого СтрокаПула Из Форма.ПулКодовПродукции Цикл
				Если СтрокаПула.КодПродукцииПулКодов = Штрихкод Тогда
					ИскомаяСтрокаПула = СтрокаПула;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИскомаяСтрокаПула = "" Тогда  
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестный код продукции";
				Сообщение.Сообщить();	
				Возврат;	
			КонецЕсли;          
			
			Если ИскомаяСтрокаПула.ИспользованоПулКодов и Форма.РежимСканирования = 1 Тогда     
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Код уже размещен";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;
			
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатуры Цикл
				
				Если СтрокаНоменклатуры.КлючСписокНоменклатуры = ИскомаяСтрокаПула.КлючПулКодов Тогда 
					
					Для Каждого СтрокаПоЯчейкам из Форма.СписокНоменклатурыПоЯчейкам Цикл
						Если СтрокаПоЯчейкам.КлючПоЯчейкам = ИскомаяСтрокаПула.КлючПулКодов и СтрокаПоЯчейкам.ШтрихкодЯчейкиПоЯчейкам = Форма.ТекущаяЯчейкаШтрихкод Тогда
							ИскомаяСтрока = СтрокаПоЯчейкам;
							Прервать;
						КонецЕсли;
					КонецЦикла;      
					 
					Если ИскомаяСтрока <> Неопределено Тогда
						Если Форма.РежимСканирования = 0 Тогда
							Если СтрокаНоменклатуры.КоличествоОтобрано > 0 и ИскомаяСтрокаПула.ИспользованоПулКодов Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамОтобрано = ИскомаяСтрока.КоличествоПоЯчейкамОтобрано - 1; 								
								СтрокаНоменклатуры.КоличествоОтобрано = СтрокаНоменклатуры.КоличествоОтобрано - 1;	  
								
								Для Каждого СтрокаИспользованных из Форма.ПулИспользованныхКодов Цикл
									Если СтрокаИспользованных.КодПродукцииПулИспользованных = ИскомаяСтрокаПула.КодПродукцииПулКодов Тогда
										Форма.ПулИспользованныхКодов.Удалить(СтрокаИспользованных);	
										ИскомаяСтрокаПула.ИспользованоПулКодов = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						ИначеЕсли Форма.РежимСканирования = 1 и НЕ ИскомаяСтрокаПула.ИспользованоПулКодов Тогда  
							Если СтрокаНоменклатуры.КоличествоОтобрано < СтрокаНоменклатуры.КоличествоДокумент Тогда
								ИскомаяСтрока.КоличествоПоЯчейкамОтобрано = ИскомаяСтрока.КоличествоПоЯчейкамОтобрано + 1;							
								СтрокаНоменклатуры.КоличествоОтобрано = СтрокаНоменклатуры.КоличествоОтобрано + 1;	
								
								ИскомаяСтрокаПула.ИспользованоПулКодов = Истина;
								СтрокаИспользованных = Форма.ПулИспользованныхКодов.Добавить();
								СтрокаИспользованных.ШтрихкодЯчейкиПулИспользованных = Форма.ТекущаяЯчейкаШтрихкод;
								СтрокаИспользованных.КодПродукцииПулИспользованных = ИскомаяСтрокаПула.КодПродукцииПулКодов; 
								СтрокаИспользованных.КлючПулИспользованных = ИскомаяСтрокаПула.КлючПулКодов;
								СтрокаИспользованных.ИндексКодаПулИспользованных = ИскомаяСтрокаПула.ИндексКодаПулКодов;
							
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
														
					Прервать;					
				КонецЕсли; 				
			КонецЦикла;  
			
			//ОтрисоватьДеревоПоТаблице(Форма, Действие);
												
		ИначеЕсли ТипШтрихкодаУпр = "Ячейка" Тогда
			
			Если Форма.ТекущаяЯчейкаШтрихкод <> Штрихкод Тогда
				ЯчейкаНайдена = ОбработатьСменуЯчейки(Форма, Штрихкод, Действие);
				//ОтрисоватьДеревоПоТаблице(Форма, Действие);				
				
				Если Не ЯчейкаНайдена Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Неизвестный штрихкод ячейки";
					Сообщение.Сообщить();	
					Возврат;		
				КонецЕсли;   
				
			КонецЕсли;
					
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестный тип штрихкода";
			Сообщение.Сообщить();			
		КонецЕсли;
		
		ОтрисоватьДеревоПоТаблице(Форма, Действие);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьТипШтрихкода(Штрихкод)  
	
	Если Сред(Штрихкод,1,2) = "C_" Тогда
		Возврат "Ячейка";
	ИначеЕсли Сред(Штрихкод,1,2) = "S_" Тогда
		Возврат "Штрихкод+Серия";  
	ИначеЕсли Сред(Штрихкод,1,2) = "P_" или Сред(Штрихкод,1,2) = "I_" Тогда
		Возврат "Код продукции";
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции      

Функция ОбработатьСменуЯчейки(Форма, Штрихкод, Действие)      
	
	ЯчейкаНайдена = Ложь;
	Форма.ТекущаяЯчейка = ""; 
	Форма.ТекущаяЯчейкаШтрихкод = "";
	
	Для Каждого СтрокаЯчеек из Форма.ШтрихкодыЯчеек	Цикл
		Если СтрокаЯчеек.ШтрихкодЯчейки = Штрихкод Тогда
			ЯчейкаНайдена = Истина;
			Форма.ТекущаяЯчейка = СтрокаЯчеек.Ячейка;
			Форма.ТекущаяЯчейкаШтрихкод = СтрокаЯчеек.ШтрихкодЯчейки;  	
			Прервать;
		КонецЕсли;
	КонецЦикла;       
		
	Возврат ЯчейкаНайдена;
	
КонецФункции             

Процедура ОтрисоватьДеревоПоТаблице(Форма, Действие) Экспорт
	
	
	Если Действие = "Размещение материалов" Тогда
		
		Форма.ДеревоЯчеек.ПолучитьЭлементы().Очистить();		
		СоответствиеЯчеек = Новый Соответствие; 
		
		Если ЗначениеЗаполнено(Форма.ТекущаяЯчейкаШтрихкод) Тогда
	    	СоответствиеЯчеек.Вставить(Форма.ТекущаяЯчейкаШтрихкод,Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());    
		Иначе
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
				Если СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам] = Неопределено Тогда
					СоответствиеЯчеек.Вставить(СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам, Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
			СтрокаДерева = СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам];
			
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ЯчейкаДерево = СтрокаНоменклатуры.ЯчейкаПоЯчейкам;
				ПодчиненнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
				ПодчиненнаяСтрока.ЯчейкаДерево = СтрокаДерева.ЯчейкаДерево;  
				ПодчиненнаяСтрока.НоменклатураДерево = СтрокаНоменклатуры.НоменклатураПоЯчейкам;
				ПодчиненнаяСтрока.КоличествоДерево = СтрокаНоменклатуры.КоличествоПоЯчейкам;
			КонецЕсли;      
			
		КонецЦикла;
		
		ЭлементыДерева =  Форма.ДеревоЯчеек.ПолучитьЭлементы();
	    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
	        Форма.Элементы.ДеревоЯчеек.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;		
		
	ИначеЕсли Действие = "Отгрузка материалов в производство" Тогда
		
		Форма.ДеревоЯчеек.ПолучитьЭлементы().Очистить();		
		СоответствиеЯчеек = Новый Соответствие; 
		
		Если ЗначениеЗаполнено(Форма.ТекущаяЯчейкаШтрихкод) Тогда
	    	СоответствиеЯчеек.Вставить(Форма.ТекущаяЯчейкаШтрихкод,Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());    
		Иначе
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
				Если СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам] = Неопределено Тогда
					СоответствиеЯчеек.Вставить(СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам, Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
			СтрокаДерева = СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам];
			
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ЯчейкаДерево = СтрокаНоменклатуры.ЯчейкаПоЯчейкам;
				ПодчиненнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
				ПодчиненнаяСтрока.ЯчейкаДерево = СтрокаДерева.ЯчейкаДерево;  
				ПодчиненнаяСтрока.НоменклатураДерево = СтрокаНоменклатуры.НоменклатураПоЯчейкам;
				ПодчиненнаяСтрока.КоличествоДеревоОтобрать = СтрокаНоменклатуры.КоличествоПоЯчейкамОтобрать;
				ПодчиненнаяСтрока.КоличествоДеревоОтобрано = СтрокаНоменклатуры.КоличествоПоЯчейкамОтобрано;
			КонецЕсли;      
			
		КонецЦикла;
		
		#Если не Сервер Тогда				
		ЭлементыДерева =  Форма.ДеревоЯчеек.ПолучитьЭлементы();
	    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
	        Форма.Элементы.ДеревоЯчеек.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;	
		#КонецЕсли
		
	ИначеЕсли Действие = "Упаковка продукции" Тогда	
				
		
		ЭлементыДерева = Форма.ДеревоКодов.ПолучитьЭлементы();  
		ЭлементыДерева.Очистить();
		
		Если ЗначениеЗаполнено(Форма.ТекущаяУпаковкаКод) Тогда
			ПулПотомков = Форма.ПулИспользованныхКодов.НайтиСтроки(Новый Структура("РодительПулИспользованных", Форма.ТекущаяУпаковкаКод));  
			
			Для Каждого СтрокаИспользованныхКодов из Форма.ПулИспользованныхКодов Цикл		
				Если СтрокаИспользованныхКодов.ПотомокПулИспользованных = Форма.ТекущаяУпаковкаКод Тогда 
					СтрокаВерхнегоУровня = ЭлементыДерева.Добавить();
					СтрокаВерхнегоУровня.КодПродукцииДеревоКодов = СтрокаИспользованныхКодов.ПотомокПулИспользованных;
					СтрокаВерхнегоУровня.КодПродукцииДеревоДеревоКодов = СтрокаИспользованныхКодов.ПредставлениеПотомкаПулИспользованных;	
					СтрокаВерхнегоУровня.ВУпаковкеДеревоКодов = СтрокаИспользованныхКодов.ВУпаковкеПулИспользованных; 
					СтрокаВерхнегоУровня.УпаковкаУИДДеревоКодов = СтрокаИспользованныхКодов.УпаковкаУИДПулИспользованных;
					ЭлементыДерева = СтрокаВерхнегоУровня.ПолучитьЭлементы();
					Прервать;
				КонецЕсли            
			КонецЦикла;
			
		Иначе     
			ПулПотомков = Форма.ПулИспользованныхКодов;
		КонецЕсли;
		
		Для Каждого СтрокаИспользованныхКодов из ПулПотомков Цикл		
			Если СтрокаИспользованныхКодов.РодительПулИспользованных = Форма.ТекущаяУпаковкаКод Тогда 
				СтрокаВерхнегоУровня = ЭлементыДерева.Добавить();
				СтрокаВерхнегоУровня.КодПродукцииДеревоКодов = СтрокаИспользованныхКодов.ПотомокПулИспользованных;
				СтрокаВерхнегоУровня.КодПродукцииДеревоДеревоКодов = СтрокаИспользованныхКодов.ПредставлениеПотомкаПулИспользованных;	
				СтрокаВерхнегоУровня.ВУпаковкеДеревоКодов = СтрокаИспользованныхКодов.ВУпаковкеПулИспользованных; 
				СтрокаВерхнегоУровня.УпаковкаУИДДеревоКодов = СтрокаИспользованныхКодов.УпаковкаУИДПулИспользованных;
				ДобавитьПотомков(СтрокаВерхнегоУровня, Форма.ПулИспользованныхКодов);	
			КонецЕсли
		КонецЦикла;     
		
		ПересчитатьКоличествоУпаковано(Форма);
		
		Если ЗначениеЗаполнено(Форма.ТекущаяУпаковкаКод) Тогда
			
			ЭлементыДерева =  Форма.ДеревоКодов.ПолучитьЭлементы();
			Для каждого ЭлементДерева Из ЭлементыДерева Цикл
				Форма.Элементы.ДеревоКодов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
			КонецЦикла;	  
			
		КонецЕсли;
		
	ИначеЕсли Действие = "Размещение продукции" Тогда
		
		Форма.ДеревоЯчеек.ПолучитьЭлементы().Очистить();		
		СоответствиеЯчеек = Новый Соответствие; 
		
		Если ЗначениеЗаполнено(Форма.ТекущаяЯчейкаШтрихкод) Тогда
	    	СоответствиеЯчеек.Вставить(Форма.ТекущаяЯчейкаШтрихкод,Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());    
		Иначе
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
				Если СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам] = Неопределено Тогда
					СоответствиеЯчеек.Вставить(СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам, Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
			СтрокаДерева = СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам];
			
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ЯчейкаДерево = СтрокаНоменклатуры.ЯчейкаПоЯчейкам;
				ПодчиненнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
				ПодчиненнаяСтрока.ЯчейкаДерево = СтрокаДерева.ЯчейкаДерево;  
				ПодчиненнаяСтрока.НоменклатураДерево = СтрокаНоменклатуры.НоменклатураПоЯчейкам;
				ПодчиненнаяСтрока.КоличествоДеревоРазместить = СтрокаНоменклатуры.КоличествоПоЯчейкамРазместить;
				ПодчиненнаяСтрока.КоличествоДеревоРазмещено = СтрокаНоменклатуры.КоличествоПоЯчейкамРазмещено;   
				
				ЭлементыПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьЭлементы();
				
				Для Каждого СтрокаИспользованных Из Форма.ПулИспользованныхКодов Цикл
					Если СтрокаИспользованных.ШтрихкодЯчейкиПулИспользованных = СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам 
						 И СтрокаИспользованных.КлючПулИспользованных = СтрокаНоменклатуры.КлючПоЯчейкам Тогда
						 ПодчиненныйЭлемент = ЭлементыПодчиненнойСтроки.Добавить();
						 ПодчиненныйЭлемент.НоменклатураДерево = СтрокаИспользованных.ИндексКодаПулИспользованных;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;      
			
		КонецЦикла;
		
		#Если не Сервер Тогда				
		ЭлементыДерева =  Форма.ДеревоЯчеек.ПолучитьЭлементы();
	    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
	        Форма.Элементы.ДеревоЯчеек.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;	
		#КонецЕсли     
	
    ИначеЕсли Действие = "Произвольное размещение" Тогда
		
		Форма.ДеревоЯчеек.ПолучитьЭлементы().Очистить();		
		СоответствиеЯчеек = Новый Соответствие; 
		
		Если ЗначениеЗаполнено(Форма.ТекущаяЯчейкаШтрихкод) Тогда
	    	СоответствиеЯчеек.Вставить(Форма.ТекущаяЯчейкаШтрихкод,Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());    
		Иначе
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
				Если СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам] = Неопределено Тогда
					СоответствиеЯчеек.Вставить(СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам, Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
			СтрокаДерева = СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам];
			
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ЯчейкаДерево = СтрокаНоменклатуры.ЯчейкаПоЯчейкам;
				ПодчиненнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
				ПодчиненнаяСтрока.ЯчейкаДерево = СтрокаДерева.ЯчейкаДерево;  
				ПодчиненнаяСтрока.НоменклатураДерево = СтрокаНоменклатуры.НоменклатураПоЯчейкам;
				ПодчиненнаяСтрока.КоличествоДеревоРазместить = СтрокаНоменклатуры.КоличествоПоЯчейкамРазместить;
				ПодчиненнаяСтрока.КоличествоДеревоРазмещено = СтрокаНоменклатуры.КоличествоПоЯчейкамРазмещено;   
				
				ЭлементыПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьЭлементы();
				
				Для Каждого СтрокаИспользованных Из Форма.ПулИспользованныхКодов Цикл
					Если СтрокаИспользованных.ШтрихкодЯчейкиПулИспользованных = СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам 
						 И СтрокаИспользованных.КлючПулИспользованных = СтрокаНоменклатуры.КлючПоЯчейкам Тогда
						 ПодчиненныйЭлемент = ЭлементыПодчиненнойСтроки.Добавить();
						 ПодчиненныйЭлемент.НоменклатураДерево = СтрокаИспользованных.ИндексКодаПулИспользованных;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;      
			
		КонецЦикла;
		
		#Если не Сервер Тогда				
		ЭлементыДерева =  Форма.ДеревоЯчеек.ПолучитьЭлементы();
	    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
	        Форма.Элементы.ДеревоЯчеек.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;	
		#КонецЕсли    
		
	ИначеЕсли Действие = "Произвольный отбор" Тогда
		
		Форма.ДеревоЯчеек.ПолучитьЭлементы().Очистить();		
		СоответствиеЯчеек = Новый Соответствие; 
		
		Если ЗначениеЗаполнено(Форма.ТекущаяЯчейкаШтрихкод) Тогда
	    	СоответствиеЯчеек.Вставить(Форма.ТекущаяЯчейкаШтрихкод,Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());    
		Иначе
			Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
				Если СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам] = Неопределено Тогда
					СоответствиеЯчеек.Вставить(СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам, Форма.ДеревоЯчеек.ПолучитьЭлементы().Добавить());	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры из Форма.СписокНоменклатурыПоЯчейкам Цикл
			СтрокаДерева = СоответствиеЯчеек[СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам];
			
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ЯчейкаДерево = СтрокаНоменклатуры.ЯчейкаПоЯчейкам;
				ПодчиненнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
				ПодчиненнаяСтрока.ЯчейкаДерево = СтрокаДерева.ЯчейкаДерево;  
				ПодчиненнаяСтрока.НоменклатураДерево = СтрокаНоменклатуры.НоменклатураПоЯчейкам;
				ПодчиненнаяСтрока.КоличествоДеревоОтобрать = СтрокаНоменклатуры.КоличествоПоЯчейкамОтобрать;
				ПодчиненнаяСтрока.КоличествоДеревоОтобрано = СтрокаНоменклатуры.КоличествоПоЯчейкамОтобрано;   
				
				ЭлементыПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьЭлементы();
				
				Для Каждого СтрокаИспользованных Из Форма.ПулИспользованныхКодов Цикл
					Если СтрокаИспользованных.ШтрихкодЯчейкиПулИспользованных = СтрокаНоменклатуры.ШтрихкодЯчейкиПоЯчейкам 
						 И СтрокаИспользованных.КлючПулИспользованных = СтрокаНоменклатуры.КлючПоЯчейкам Тогда
						 ПодчиненныйЭлемент = ЭлементыПодчиненнойСтроки.Добавить();
						 ПодчиненныйЭлемент.НоменклатураДерево = СтрокаИспользованных.ИндексКодаПулИспользованных;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;      
			
		КонецЦикла;
		
		#Если не Сервер Тогда				
		ЭлементыДерева =  Форма.ДеревоЯчеек.ПолучитьЭлементы();
	    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
	        Форма.Элементы.ДеревоЯчеек.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;	
		#КонецЕсли
		
	КонецЕсли;
	
	
КонецПроцедуры   

Процедура ДобавитьПотомков(СтрокаРодитель, ПулИспользованныхКодов)
	
	ПулПотомков = ПулИспользованныхКодов.НайтиСтроки(Новый Структура("РодительПулИспользованных", СтрокаРодитель.КодПродукцииДеревоКодов));
	
	ЭлементыРодителя = СтрокаРодитель.ПолучитьЭлементы();
	
	Для Каждого СтрокаПотомков из ПулПотомков Цикл
		ЭлементДерева = ЭлементыРодителя.Добавить();
		ЭлементДерева.КодПродукцииДеревоКодов = СтрокаПотомков.ПотомокПулИспользованных;
		ЭлементДерева.КодПродукцииДеревоДеревоКодов = СтрокаПотомков.ПредставлениеПотомкаПулИспользованных; 
		ЭлементДерева.ВУпаковкеДеревоКодов = СтрокаПотомков.ВУпаковкеПулИспользованных;
		ЭлементДерева.УпаковкаУИДДеревоКодов = СтрокаПотомков.УпаковкаУИДПулИспользованных;
		ДобавитьПотомков(ЭлементДерева, ПулИспользованныхКодов);			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковано(Форма)     
	
	ЭлементыДерева = Форма.ДеревоКодов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл		
		ПересчитатьКоличествоУпакованоДляЭлемента(ЭлементДерева);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпакованоДляЭлемента(ЭлементДерева) 
	
	ПодчиненныЭлементыЭлемента = ЭлементДерева.ПолучитьЭлементы();  
	Если ЭлементДерева.ВУпаковкеДеревоКодов = 1 Тогда
		ЭлементДерева.УпакованоДеревоКодов = 1; 
	Иначе
		ЭлементДерева.УпакованоДеревоКодов = ПодчиненныЭлементыЭлемента.Количество();	
	КонецЕсли; 
	ЭлементДерева.УпакованоСтрокаДеревоКодов = Строка(ЭлементДерева.УпакованоДеревоКодов)+"/"+Строка(ЭлементДерева.ВУпаковкеДеревоКодов);
	
	Для Каждого Элемент Из ПодчиненныЭлементыЭлемента Цикл
		ПересчитатьКоличествоУпакованоДляЭлемента(Элемент);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассивИерархией(Родитель, ПулИспользованныхКодов, МассивУдаляемыхСтрок)
	
	МассивПотомков = ПулИспользованныхКодов.НайтиСтроки(Новый Структура("РодительПулИспользованных", Родитель)); 
	
	Для Каждого СтрокаМассива Из МассивПотомков Цикл
		МассивУдаляемыхСтрок.Добавить(СтрокаМассива);
		ДополнитьМассивИерархией(СтрокаМассива.ПотомокПулИспользованных, ПулИспользованныхКодов, МассивУдаляемыхСтрок);
	КонецЦикла;
		
КонецПроцедуры


#КонецОбласти