
#Область ПрограммныйИнтерфейс

// Функция осуществляет подключение устройства
//
Функция ПодключитьУстройство(ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ВыходныеПараметры = Новый Структура();
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ПараметрыПодключения);
	Если ОбъектДрайвера = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Ошибка создания экземпляра драйвера.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый = "";
	ТекстОшибки = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Вставить("ТекстОшибки", НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;       
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыПодключения Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;       
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Вставить("ТекстОшибки", НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	Иначе
		Если ТипОборудованияИспользуемый = "ПринтерЧеков" 
			Или ТипОборудованияИспользуемый = "ККТ" Тогда
				ВремВыходныеПараметры = Новый Структура();
				ПолучитьШиринуСтроки(ОбъектДрайвера, ПараметрыПодключения, ВремВыходныеПараметры);
			КонецЕсли;
			
		ВремВыходныеПараметры = Новый Структура();
		ПолучитьОписаниеДрайвера(ОбъектДрайвера, ПараметрыПодключения, Неопределено, ВремВыходныеПараметры);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства
//
Функция ОтключитьУстройство(ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ПараметрыПодключения);
	Если ОбъектДрайвера = Неопределено Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ВыходныеПараметры = Новый Структура();
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции                      

// Получение объекта драйвера
//
Функция ПолучитьОбъектДрайвера(ПараметрыПодключения) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ПараметрыПодключения.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			Если НЕ ПустаяСтрока(ПараметрыПодключения.ДрайверОборудованияИмя) Тогда
				ИмяОбъекта = Сред(ПараметрыПодключения.ИдентификаторОбъекта, Найти(ПараметрыПодключения.ИдентификаторОбъекта, ".") + 1); 
				Префикс = Сред(ПараметрыПодключения.ИдентификаторОбъекта, 1, Найти(ПараметрыПодключения.ИдентификаторОбъекта, ".")); 
				ProgID = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
				Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет." + ПараметрыПодключения.ДрайверОборудованияИмя, СтрЗаменить(ИмяОбъекта, ".", "_"), ТипВнешнейКомпоненты.Native);
			Иначе
				ProgID = ПараметрыПодключения.ИдентификаторОбъекта;
				ПодключитьВнешнююКомпоненту(ProgID);
			КонецЕсли;
			ОбъектДрайвера = Новый (ProgID);
		Исключение
			Сообщить(НСтр("ru='Не удалось загрузить драйвер устройства.'"));
		КонецПопытки;
		
		Если ОбъектДрайвера <> Неопределено Тогда
			глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ПараметрыПодключения.ДрайверОборудования, ОбъектДрайвера);
			ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ПараметрыПодключения.ДрайверОборудования];
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат ОбъектДрайвера;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ПараметрыПодключения, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено) Экспорт
	
	Результат = Ложь;
		
	ВыходныеПараметры = Новый Структура();
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ПараметрыПодключения);
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Получить доступность устройства.
	Если Команда = "GetAvailable" ИЛИ Команда = "ПолучитьДоступность" Тогда
		Результат = ПолучитьДоступность(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЧЕКОВ
	
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера,ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		Результат = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать этикетки
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток"  Тогда
		Результат = ПечатьЭтикеток(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека внесения/выемки
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		Результат = Инкассация(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ C 54-ФЗ 
	
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		Результат = ФискализацияЧека(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		Результат = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// Открыть смену
	ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
		Результат = ЗакрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека коррекции
	ИначеЕсли Команда = "PrintReceiptCorrection" ИЛИ Команда = "ПечатьЧекаКоррекции" Тогда
		Результат = ФискализацияЧекаКоррекции(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// Получить текущее состояние 
	ИначеЕсли Команда = "GetCurrentStatus" ИЛИ Команда = "ПолучитьТекущееСостояние" Тогда
		Результат = ПолучитьТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить параметры ККТ
	ИначеЕсли Команда = "GetDataKKT" ИЛИ Команда = "ПолучитьПараметрыККТ" Тогда
		Результат = ПолучитьПараметрыККТ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Операции с ФН
	ИначеЕсли Команда = "OperationFN" ИЛИ Команда = "ОперацияФН" Тогда
		Результат = ОперацияФискальногоНакопителя(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "OpenSessionRegistrationKM" ИЛИ Команда = "ОткрытьСессиюРегистрацииКМ" Тогда
		Результат = ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "CloseSessionRegistrationKM" ИЛИ Команда = "ЗакрытьСессиюРегистрацииКМ" Тогда
		Результат = ЗакрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ЗапросКМ" ИЛИ Команда = "RequestKM" Тогда
		Результат = ЗапросКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ПолучитьРезультатыЗапросаКМ" ИЛИ Команда = "GetProcessingKMResult" Тогда
		Результат = ПолучитьРезультатыЗапросаКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ПодтвердитьКМ" ИЛИ Команда = "ConfirmKM" Тогда
		Результат = ПодтвердитьКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПЛАТЕЖНЫМИ СИСТЕМАМИ
	
	// Оплата по платежной карте
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Возврат платежа по платежной карте
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отмена платежа по платежной карте
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ УСТРОЙСТВ ВВОДА ДАННЫХ
	
	ИначеЕсли Команда = "GetData" ИЛИ Команда = "ПолучитьДанные" Тогда
		Результат = ПолучитьДанныеВвода(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С RFID
	
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "OpenSessionRFID" ИЛИ Команда = "ОткрытьСессиюRFID" Тогда
		Результат = ОткрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "CloseSessionRFID" ИЛИ Команда = "ЗакрытьСессиюRFID" Тогда
		Результат = ЗакрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры);
		
	// Записать данные в метку RFID 
	ИначеЕсли Команда = "SaveDataTagRFID" ИЛИ Команда = "ЗаписатьДанныеВМеткуRFID " Тогда
		Результат = ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	
	// Вывод строк на дисплей
	ИначеЕсли Команда = "DisplayText" ИЛИ Команда = "ВывестиСтрокуНаДисплейПокупателя" Тогда
		Результат = ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Очистка дисплея
	ИначеЕсли Команда = "ClearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда
		Результат = ОчиститьДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры);
		
	// Очистка дисплея
	ИначеЕсли Команда = "DisplayQRCode" ИЛИ Команда = "ВыводQRКода" Тогда
		Результат = ВыводQRКодаНаДисплеяПокупателя(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить параметры вывода
	ИначеЕсли Команда = "GetOutputOptions" ИЛИ Команда = "ПолучитьПараметрыВывода" Тогда
		Результат = ПолучитьПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	
	// Получить вес 
	ИначеЕсли Команда = "GetWeight" ИЛИ Команда = "ПолучитьВес" Тогда
		Результат = ПолучитьВес(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры); 
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ДРАЙВЕРОВ
	
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Функция возвращает версию драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ТекстОшибки = НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Команда%", Команда);
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Функция возвращает доступность устройства.
//
Функция ПолучитьДоступность(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Для Каждого Параметр Из ПараметрыПодключения Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;       
	
	Попытка
		РезультатТеста       = "";
		АктивированДемоРежим = "";
		
		Результат = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
		Если Результат Тогда
			ВыходныеПараметры.Вставить("РезультатТеста"      , РезультатТеста);
			ВыходныеПараметры.Вставить("АктивированДемоРежим", АктивированДемоРежим);
		Иначе
			ТекстОшибки = НСтр("ru='Ошибка выполнения теста.'"); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", РезультатТеста);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияВызовСервера.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
	КонецЕсли;
	
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
			// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, ИнтеграционныйКомпонент, 
			ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
		Попытка
			ОписаниеДрайвера = "";
			ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
			ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
			ВерсияДрайвера            = ОписаниеДрайвераПараметры.ВерсияДрайвера;
			НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
			ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
			ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
			ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
			ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
			URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
			// Получаем ревизию интерфейса драйвера.
			РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
		Исключение
			ИсключениеРезультат = Ложь;
			Сообщить(НСтр("ru='Ошибка получения описания драйвера'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки
	КонецПопытки;
	
	ВыходныеПараметры.Вставить("НаименованиеДрайвера"      , НаименованиеДрайвера);
	ВыходныеПараметры.Вставить("ОписаниеДрайвера"          , ОписаниеДрайвера);
	ВыходныеПараметры.Вставить("ТипОборудования"           , ТипОборудования);
	ВыходныеПараметры.Вставить("РевизияИнтерфейса"         , РевизияИнтерфейса);
	ВыходныеПараметры.Вставить("ИнтеграционныйКомпонент"   , ИнтеграционныйКомпонент);
	ВыходныеПараметры.Вставить("ОсновнойДрайверУстановлен" , ОсновнойДрайверУстановлен);
	ВыходныеПараметры.Вставить("URLЗагрузкиДрайвера"       , URLЗагрузкиДрайвера);
	ВыходныеПараметры.Вставить("ВерсияДрайвера"            , ВерсияДрайвера); 
	
	ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	
	// Получаем описание драйвера
	ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
	ВыходныеПараметры.Вставить("ТаблицаПараметров", ПараметрыДрайвера);
	
	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
		Попытка
			// Получаем описание драйвера.
			ОписаниеДрайвера = "";
			ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
			ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
			ВерсияДрайвера = ОписаниеДрайвераПараметры.ВерсияДрайвера;
		Исключение
			Результат = Истина;
		КонецПопытки;
	КонецПопытки;
	
	ВыходныеПараметры.Вставить("ВерсияДрайвера"   , ВерсияДрайвера);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляПлатежныхСистем

// Функция оплаты по платежной карте
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) 
	
	Результат = Ложь;         
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
	
	Если ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема" Тогда
		
		СуммаОперации = ВходныеПараметры.Сумма; 
		НомерЧека = ВходныеПараметры.НомерЧека;
		НомерКарты          = "";
		НомерСсылкиОперации = "";
		КодАвторизации      = "";
		ТекстСлипЧека       = "";    
		НомерМерчанта       = ?(ВходныеПараметры.Свойство("НомерМерчанта"), ВходныеПараметры.НомерМерчанта, 0);     
		РеквизитыКартыQR    = ?(ВходныеПараметры.Свойство("РеквизитыКартыQR"), ВходныеПараметры.РеквизитыКартыQR, "");
		
		Если НЕ (СуммаОперации > 0) Тогда
			ТекстОшибки = НСтр("ru='Не корректная сумма операции.'"); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		Попытка            
			Если РевизияИнтерфейса >= 4000 Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли ПараметрыПодключения.РевизияИнтерфейса >= 3005 Тогда
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека); 
			Иначе
				Результат = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека);  
			КонецЕсли;
			Если Результат Тогда
				ВыходныеПараметры.Вставить("НомерКарты"         , НомерКарты);
				ВыходныеПараметры.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
				ВыходныеПараметры.Вставить("КодАвторизации"     , КодАвторизации);
				ВыходныеПараметры.Вставить("СлипЧек"            , ТекстСлипЧека);
			Иначе
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОплатитьПлатежнойКартой>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//  Функция возврата по платежной карте
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;  
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
	
	Если ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема" Тогда
		
		СуммаОперации = ВходныеПараметры.Сумма; 
		НомерЧека  = ВходныеПараметры.НомерЧека;
		НомерКарты = ВходныеПараметры.НомерКарты;
		НомерСсылкиОперации = ВходныеПараметры.НомерСсылкиОперации;
		КодАвторизации      = ВходныеПараметры.КодАвторизации;
		ТекстСлипЧека       = "";
		НомерМерчанта       = ?(ВходныеПараметры.Свойство("НомерМерчанта"), ВходныеПараметры.НомерМерчанта, 0);  
		РеквизитыКартыQR    = ?(ВходныеПараметры.Свойство("РеквизитыКартыQR"), ВходныеПараметры.РеквизитыКартыQR, "");
		
		Если НЕ (СуммаОперации > 0) Тогда
			ТекстОшибки = НСтр("ru='Не корректная сумма операции.'"); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		Попытка   
			Если РевизияИнтерфейса >= 4000 Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации, 
					НомерКарты, НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека);
			ИначеЕсли РевизияИнтерфейса >= 3005 Тогда
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека); 
			Иначе
				Результат = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека);    
			КонецЕсли;
			Если Результат Тогда
				ВыходныеПараметры.Вставить("НомерКарты"         , НомерКарты);
				ВыходныеПараметры.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
				ВыходныеПараметры.Вставить("КодАвторизации"     , КодАвторизации);
				ВыходныеПараметры.Вставить("СлипЧек"            , ТекстСлипЧека);
			Иначе
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//  Функция отмены по платежной карте
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) 
	
	Результат = Ложь;
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
	
	Если ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема" Тогда
		
		СуммаОперации = ВходныеПараметры.Сумма;      
		СуммаОригинальнойОперации = 0;
		НомерЧека  = ВходныеПараметры.НомерЧека;
		НомерКарты = ВходныеПараметры.НомерКарты;
		НомерСсылкиОперации = ВходныеПараметры.НомерСсылкиОперации;
		КодАвторизации      = ВходныеПараметры.КодАвторизации;
		ТекстСлипЧека       = "";
		НомерМерчанта       = ?(ВходныеПараметры.Свойство("НомерМерчанта"), ВходныеПараметры.НомерМерчанта, 0);     
		РеквизитыКартыQR    = ?(ВходныеПараметры.Свойство("РеквизитыКартыQR"), ВходныеПараметры.РеквизитыКартыQR, "");
		
		Если НЕ (СуммаОперации > 0) Тогда
			ТекстОшибки = НСтр("ru='Не корректная сумма операции.'"); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		Попытка                 
			Если РевизияИнтерфейса >= 4000 Тогда
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, РеквизитыКартыQR, СуммаОперации,
						СуммаОригинальнойОперации, НомерКарты, НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека);        
			ИначеЕсли РевизияИнтерфейса >= 3005 Тогда
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерМерчанта, СуммаОперации, 
					НомерКарты, НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека); 
			Иначе
				Результат = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, СуммаОперации, 
					НомерЧека, НомерСсылкиОперации, КодАвторизации, ТекстСлипЧека); 
			КонецЕсли;
			Если Результат Тогда
				ВыходныеПараметры.Вставить("НомерКарты"         , НомерКарты);
				ВыходныеПараметры.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
				ВыходныеПараметры.Вставить("КодАвторизации"     , КодАвторизации);
				ВыходныеПараметры.Вставить("СлипЧек"            , ТекстСлипЧека);
			Иначе
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция cверки итогов по картам
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема" Тогда
		
		СлипЧек   = "";
		
		Попытка
			Результат = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, СлипЧек);
			Если Результат Тогда
				ВыходныеПараметры.Вставить("СлипЧек", СлипЧек);
			Иначе
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИтогиДняПоКартам>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВвода

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ПараметрыПодключения);
	Если ОбъектДрайвера = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Ошибка создания экземпляра драйвера.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Событие = "RFID" Тогда
		ТаблицаМетокXML = "";
		Ответ = ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, Данные, ТаблицаМетокXML, ВыходныеПараметры);
		Если //Ответ И 
			НЕ ПустаяСтрока(ТаблицаМетокXML) Тогда
			ТаблицаМетокXML = СокрЛП(ТаблицаМетокXML); 
			ТаблицаМеток = МенеджерОборудованияВызовСервера.МеткиRFID(ТаблицаМетокXML);
			ВыходныеПараметры.Вставить("RFID", ТаблицаМеток);
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьДанныеВвода(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВысокогоУровня

// Функция осуществляет печать этикеток на устройстве.
//
Функция ПечатьЭтикеток(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	ВыходныеПараметрыВрем = Новый Структура(); 
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	РазделительВнут = МенеджерОборудованияКлиентСервер.ПостроитьПоле("", ШиринаСтроки, "-");
	СтрокиТекста = РазделительВнут  + Символы.ПС;
	
	Если ВходныеПараметры.Свойство("Этикетки") Тогда
		Для Каждого Этикетка Из ВходныеПараметры.Этикетки Цикл
			
			Если Этикетка.Свойство("ШапкаЭтикетки") Тогда
				Для НомерСтроки = 1 По СтрЧислоСтрок(Этикетка.ШапкаЭтикетки) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(Этикетка.ШапкаЭтикетки, НомерСтроки);
					СтрокиТекста = СтрокиТекста + МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ВыделеннаяСтрока, ШиринаСтроки, ,Истина) + Символы.ПС; 
				КонецЦикла;
			КонецЕсли;
			
			Если Этикетка.Свойство("Штрихкод") И Этикетка.Свойство("Штрихкод") Тогда
				СтрокиТекста = СтрокиТекста + "|ШтрихКод|" + Этикетка.ТипШтрихкода + "|" + Этикетка.Штрихкод + Символы.ПС; 
			КонецЕсли;
			
			Если Этикетка.Свойство("ПодвалЭтикетки") Тогда
				Для НомерСтроки = 1 По СтрЧислоСтрок(Этикетка.ПодвалЭтикетки) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(Этикетка.ПодвалЭтикетки, НомерСтроки);
					СтрокиТекста = СтрокиТекста + МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ВыделеннаяСтрока, ШиринаСтроки, ,Истина) + Символы.ПС; 
				КонецЦикла;
			КонецЕсли;
			СтрокиТекста = СтрокиТекста + РазделительВнут + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	ВходныеПараметрыВрем = Новый Структура("СтрокиТекста", СтрокиТекста);
	Возврат ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметрыВрем, ВыходныеПараметры);
	
КонецФункции  

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеПринтерЧеков

// Функция осуществляет формирование фискального отчета.
//
Функция СформироватьФискальныйОтчет(ОбъектДрайвера, ОтчетСГашением, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	
	ТекстОтчета = "";
	Если ВходныеПараметры.Свойство("ТекстОтчета") И НЕ ПустаяСтрока(ВходныеПараметры.ТекстОтчета) Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(ВходныеПараметры.ТекстОтчета) Цикл
			ВыделеннаяСтрока = СтрПолучитьСтроку(ВходныеПараметры.ТекстОтчета, НомерСтроки);
			ПозицияРазделителя = Найти(ВыделеннаяСтрока, Символы.Таб);
			Если ПозицияРазделителя > 0 Тогда
				Строка1 = Лев(ВыделеннаяСтрока, ПозицияРазделителя - 1);
				Строка2 = Сред(ВыделеннаяСтрока, ПозицияРазделителя + 1);
				ТекстОтчета = ТекстОтчета +  МенеджерОборудованияКлиентСервер.ВыстроитьПоля(Строка1, Строка2,  ШиринаСтроки) + Символы.ПС;
			Иначе
				ТекстОтчета = ТекстОтчета + ВыделеннаяСтрока + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстОтчета  = ТекстОтчета + МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'"), ШиринаСтроки, , Истина);
	СтрокиТекста = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоДокумента(?(ОтчетСГашением, 5, 4), ВходныеПараметры, ШиринаСтроки, ТекстОтчета);
	ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
	
	Результат = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляККТ54

// Функция осуществляет формирование отчета о текущем состоянии расчетов.
//
Функция ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Результат = СформироватьФискальныйОтчет(ОбъектДрайвера, Ложь, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
		
	ИначеЕсли  ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		ПараметрыСостояния = "";
		ФискальныеДанныеСтруктура = Неопределено;
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
				Если Результат Тогда
					ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
				КонецЕсли;
			Иначе
				Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства);
			КонецЕсли;
			Если НЕ Результат Тогда
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
			ВыходныеПараметры.Вставить("ФискальныеДанные", ФискальныеДанныеСтруктура);
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет формирование отчета без гашения.
//
Функция ОтчетБезГашения(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Результат = СформироватьФискальныйОтчет(ОбъектДрайвера, Ложь, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
		
	ИначеЕсли  ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
			Иначе
				Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
			КонецЕсли;
			Если НЕ Результат Тогда
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие смены.
//
Функция ОткрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) 
	
	Результат  = Ложь;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ПараметрыСостояния = Неопределено;
	ФискальныеДанныеСтруктура = Неопределено;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
				Если Результат Тогда
					ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
					НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
					НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				КонецЕсли;
			Иначе
				Если РевизияИнтерфейса >= 2002 Тогда // Версия стандарта 2.2 (ОФД 1.0.5)
					Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
						ФискальныеДанныеСтруктура.СтатусСмены   = 2; // Открыта
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
					КонецЕсли;
				Иначе
					Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
					Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, Кассир, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
						ФискальныеДанныеСтруктура.СтатусСмены   = 2; // Открыта
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("НомерСмены"    , НомерСмены);
				ВыходныеПараметры.Вставить("НомерДокумента", НомерДокумента);
				ВыходныеПараметры.Вставить("ПараметрыСостояния", ФискальныеДанныеСтруктура);
			Иначе
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
	
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены"    , НомерСмены);
		ВыходныеПараметры.Вставить("НомерДокумента", НомерДокумента);
		ВыходныеПараметры.Вставить("ПараметрыСостояния", ПараметрыСостояния);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие смены.
//
Функция ЗакрытьСмену(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) 
	
	Результат  = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ПараметрыСостояния = Неопределено;
	ФискальныеДанныеСтруктура = Неопределено;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		Попытка
			РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
				Если Результат Тогда
					ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
					НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
					НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				КонецЕсли;
			Иначе
				Если РевизияИнтерфейса >= 2002 Тогда // Версия стандарта 2.2 (ОФД 1.0.5)
					Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
						ФискальныеДанныеСтруктура.СтатусСмены   = 1; // Открыта
					КонецЕсли;
				Иначе
					Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
					Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, Кассир, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
						ФискальныеДанныеСтруктура.СтатусСмены   = 1; // Открыта
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("НомерЧека"     , НомерСмены);
				ВыходныеПараметры.Вставить("НомерДокумента", НомерДокумента);
				ВыходныеПараметры.Вставить("ПараметрыСостояния", ФискальныеДанныеСтруктура);
			Иначе
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
				Результат = Ложь;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Результат = Ложь;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		Результат = СформироватьФискальныйОтчет(ОбъектДрайвера, Истина, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет фискализацию чека.
//
Функция ФискализацияЧека(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	Результат  = Истина;
	
	ОбщиеПараметры = ВходныеПараметры;
	ФискальныйПризнак  = "";   
	АдресСайтаПроверки = "";
	
	ПодписьЕГАИС = ВходныеПараметры.Свойство("ПодписьЕГАИС") И ВходныеПараметры.ПодписьЕГАИС;
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	
	ВходныеПараметры.Вставить("ПродолжитьПечать", Истина);
	ВходныеПараметры.Вставить("ТекстОшибки"     , Неопределено); 
	ВходныеПараметры.Вставить("АдресЧека"       , Неопределено);    
	ВходныеПараметры.Вставить("ПодписьЧека"     , Неопределено);    
	Если Не ВходныеПараметры.Свойство("НомерЧека") Тогда
		ВходныеПараметры.Вставить("НомерЧека" , 0); 
	КонецЕсли;
	Если Не ВходныеПараметры.Свойство("НомерСмены") Тогда
		ВходныеПараметры.Вставить("НомерСмены", 0); 
	КонецЕсли;
		
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда 
		
		Если ПодписьЕГАИС Тогда
			МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПослеОткрытияЧека(ВходныеПараметры);
			Если НЕ ВходныеПараметры.ПродолжитьПечать Тогда
				СтрокиТекста = НСтр("ru='<ЧЕК АННУЛИРОВАН>'");
				ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
				ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("ТекстОшибки", ВходныеПараметры.ТекстОшибки);
				Результат = Ложь;
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		СтрокиТекста = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоДокумента(0, ВходныеПараметры, ШиринаСтроки);
		ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
		
		Результат = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		Если Результат Тогда
			НомерЧека  = ?(ВходныеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ВходныеПараметры.НомерЧека), ВходныеПараметры.НомерЧека, 0);
			НомерСмены = ?(ВходныеПараметры.Свойство("НомерСмены") И НЕ ПустаяСтрока(ВходныеПараметры.НомерСмены), ВходныеПараметры.НомерСмены, 0);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("НомерЧека" , НомерЧека);
			ВыходныеПараметры.Вставить("НомерСмены", НомерСмены);
			ВыходныеПараметры.Вставить("ФискальныйПризнак" , Неопределено);
			ВыходныеПараметры.Вставить("АдресСайтаПроверки", Неопределено);
			ВыходныеПараметры.Вставить("РегистрационныйНомерККТ", Неопределено);
			Если Результат И ПодписьЕГАИС Тогда
				ВремВыходныеПараметры = Новый Структура();
				ВремВходныеПараметры  = Новый Структура("СтрокиТекста", МенеджерОборудованияКлиентСервер.СформироватьШаблонИнфоКвитанции(ПараметрыПодключения, ВходныеПараметры));
				ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВремВходныеПараметры, ВремВыходныеПараметры);
			КонецЕсли;
		ИначеЕсли ПодписьЕГАИС Тогда
			МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПриОшибкеПечати(ВходныеПараметры);
		КонецЕсли;
			
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда 
		
		НомерСменыККТ  = 0;
		НомерЧекаККТ   = 0;
		СтатусСмены    = 0;
		
		Если ПодписьЕГАИС Тогда
			
			ВыходныеПараметрыВрем = Новый Структура(); 
			Результат = ПолучитьТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметрыВрем);
			Если НЕ Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("ТекстОшибки", ВыходныеПараметрыВрем.ТекстОшибки);
				Результат = Ложь;
				Возврат Результат;
			Иначе
				ВходныеПараметры.Вставить("НомерЧека" , ВыходныеПараметрыВрем.НомерДокумента + 1); 
				ВходныеПараметры.Вставить("НомерСмены", ВыходныеПараметрыВрем.НомерСмены);
			КонецЕсли;
			
			МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПослеОткрытияЧека(ВходныеПараметры);
			Если НЕ ВходныеПараметры.ПродолжитьПечать Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("ТекстОшибки", ВходныеПараметры.ТекстОшибки);
				Результат = Ложь;
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		РегистрационныйНомерККТ = "";
		
		Электронно = ОбщиеПараметры.Электронно;
		Отправляет1СSMS   = ОбщиеПараметры.Отправляет1СSMS;
		Отправляет1СEmail = ОбщиеПараметры.Отправляет1СEmail;
		СуммаЧека = 0;
		РезультатОперацииXML = "";
		
		РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		
		ДанныеЧекаXML = МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, СуммаЧека, ШиринаСтроки, РевизияИнтерфейса);
		Попытка
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Электронно, ДанныеЧекаXML, РезультатОперацииXML);
				Если Результат Тогда
					РезультатОперации = МенеджерОборудованияВызовСервера.РезультатыФискализацияЧекаИзXMLПакета(РезультатОперацииXML);
					НомерЧекаККТ  = РезультатОперации.НомерЧекаККТ;    
					НомерСменыККТ = РезультатОперации.НомерСменыККТ;
					ФискальныйПризнак = РезультатОперации.ФискальныйПризнак;
					АдресСайтаПроверки = РезультатОперации.АдресСайтаПроверки;
				КонецЕсли;
			ИначеЕсли РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 и выше (ОФД 1.0.5)
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Электронно, 
					ДанныеЧекаXML, НомерЧекаККТ, НомерСменыККТ, ФискальныйПризнак, АдресСайтаПроверки); 
			Иначе // Версия стандарта 2.1 (ОФД 1.0)
				Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Кассир, Электронно, ДанныеЧекаXML, 
					НомерЧекаККТ, НомерСменыККТ, ФискальныйПризнак, АдресСайтаПроверки); 
			КонецЕсли;
			
			Если НЕ Результат Тогда
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
				
				Если ПодписьЕГАИС Тогда
					МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПриОшибкеПечати(ВходныеПараметры);
				КонецЕсли;
				Результат = Ложь;
				Возврат Результат;
			Иначе
				// Заполнение выходных параметров.
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("НомерЧека",  НомерЧекаККТ);
				ВыходныеПараметры.Вставить("НомерСмены", НомерСменыККТ);
				ВыходныеПараметры.Вставить("ФискальныйПризнак" , ФискальныйПризнак);
				ВыходныеПараметры.Вставить("АдресСайтаПроверки", АдресСайтаПроверки);
				ВыходныеПараметры.Вставить("РегистрационныйНомерККТ", РегистрационныйНомерККТ);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки();
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Результат = Ложь;
		КонецПопытки;
		
		Если Результат И (Отправляет1СSMS Или Отправляет1СEmail) Тогда
			ДатаСеанса = ТекущаяДата();
			ТекстСообщения  = НСтр("ru='ККТ№'") + РегистрационныйНомерККТ + Символы.НПП + 
				Формат(СуммаЧека, "ЧРД=.;ЧЦ=10;ЧДЦ=2;ЧН=0.00;ЧГ=0") + Символы.НПП + 
				Формат(ДатаСеанса, "ДФ=""дд.ММ.гггг ЧЧ:мм""") + Символы.НПП + 
				НСтр("ru='ФПД:'") + ФискальныйПризнак + Символы.НПП + 
				НСтр("ru='САЙТ:'") + АдресСайтаПроверки;
			ПокупательEmail = ?(Отправляет1СEmail, ОбщиеПараметры.ПокупательEmail, Неопределено);
			ПокупательНомер = ?(Отправляет1СSMS  , ОбщиеПараметры.ПокупательНомер, Неопределено);
			ОбщиеПараметры.НомерСмены = НомерСмены;
			ОбщиеПараметры.НомерЧека  = НомерЧека;
			ОбщиеПараметры.Вставить("ФискальныйПризнак"      , ФискальныйПризнак);
			ОбщиеПараметры.Вставить("АдресСайтаПроверки"     , АдресСайтаПроверки);
			ОбщиеПараметры.Вставить("РегистрационныйНомерККТ", РегистрационныйНомерККТ);
			МенеджерОборудованияКлиентПереопределяемый.НачатьОтправкуЭлектронногоЧека(ОбщиеПараметры, ТекстСообщения, ПокупательEmail, ПокупательНомер);
		КонецЕсли;
		
		Если Результат И ПодписьЕГАИС Тогда
			ВремВыходныеПараметры = Новый Структура();
			ВремВходныеПараметры  = Новый Структура("СтрокиТекста", МенеджерОборудованияКлиентСервер.СформироватьШаблонИнфоКвитанции(ПараметрыПодключения, ВходныеПараметры));
			ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВремВходныеПараметры, ВремВыходныеПараметры);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Осуществляет фискализацию коррекции.
//      
Функция ФискализацияЧекаКоррекции(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ВидовОплаты = 0;
	НомерСменыККТ  = 0;
	НомерЧекаККТ   = 0;
	ФискальныйПризнак  = "";
	АдресСайтаПроверки = "";
	РегистрационныйНомерККТ = "";    
	РезультатОперацииXML  = "";
	
	Если ВходныеПараметры.Свойство("НеприменениеККТ") И ВходныеПараметры.НеприменениеККТ Тогда
		// Сценарий 1 - неприменение ККТ. 
		РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
		ДанныеЧекаXML = МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляЧекаКоррекции(ВходныеПараметры, РевизияИнтерфейса);
		Попытка
			
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеЧекаXML, РезультатОперацииXML); 
				РезультатОперации = МенеджерОборудованияВызовСервера.РезультатыФискализацияЧекаИзXMLПакета(РезультатОперацииXML);
				Если Результат Тогда
					НомерЧекаККТ  = РезультатОперации.НомерЧекаККТ;    
					НомерСменыККТ = РезультатОперации.НомерСменыККТ;
					ФискальныйПризнак = РезультатОперации.ФискальныйПризнак;
					АдресСайтаПроверки = РезультатОперации.АдресСайтаПроверки;
				КонецЕсли;
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеЧекаXML, НомерЧекаККТ, НомерСменыККТ, 
					ФискальныйПризнак, АдресСайтаПроверки); 
			КонецЕсли;
			
			Если НЕ Результат Тогда
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Иначе
				// Заполнение выходных параметров.
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("НомерЧека",  НомерЧекаККТ);
				ВыходныеПараметры.Вставить("НомерСмены", НомерСменыККТ);
				ВыходныеПараметры.Вставить("ФискальныйПризнак" , ФискальныйПризнак);
				ВыходныеПараметры.Вставить("АдресСайтаПроверки", АдресСайтаПроверки);
				ВыходныеПараметры.Вставить("РегистрационныйНомерККТ", РегистрационныйНомерККТ);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧекКоррекции>.'") + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	Иначе
		// Сценарий 2 - исправление нарушений применения ККТ.
		// Меняем признак типа расчета на противоположный.
		Если ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
			ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		ИначеЕсли ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств") Тогда
			ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		ИначеЕсли ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств") Тогда
			ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств");
		ИначеЕсли ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств") Тогда
			ВходныеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
		КонецЕсли; 
		
		РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
		ДанныеЧекаXML = МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляЧекаКоррекции(ВходныеПараметры, РевизияИнтерфейса);
		Попытка
			
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеЧекаXML, РезультатОперацииXML); 
				РезультатОперации = МенеджерОборудованияВызовСервера.РезультатыФискализацияЧекаИзXMLПакета(РезультатОперацииXML);
				Если Результат Тогда
					НомерЧекаККТ  = РезультатОперации.НомерЧекаККТ;    
					НомерСменыККТ = РезультатОперации.НомерСменыККТ;
					ФискальныйПризнак = РезультатОперации.ФискальныйПризнак;
					АдресСайтаПроверки = РезультатОперации.АдресСайтаПроверки;
				КонецЕсли;
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеЧекаXML, НомерЧекаККТ, НомерСменыККТ, 
					ФискальныйПризнак, АдресСайтаПроверки); 
			КонецЕсли;
			
			Если НЕ Результат Тогда
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Иначе
				// Заполнение выходных параметров.
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("НомерЧека",  НомерЧекаККТ);
				ВыходныеПараметры.Вставить("НомерСмены", НомерСменыККТ);
				ВыходныеПараметры.Вставить("ФискальныйПризнак" , ФискальныйПризнак);
				ВыходныеПараметры.Вставить("АдресСайтаПроверки", АдресСайтаПроверки);
				ВыходныеПараметры.Вставить("РегистрационныйНомерККТ", РегистрационныйНомерККТ);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧекКоррекции>.'") + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции

// Осуществляет печать текста.
//
Функция ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	   
	Результат  = Истина;  
	СтрокиТекста = ВходныеПараметры.СтрокиТекста + Символы.ПС + Символы.ПС;
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	     
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда 
		
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокиТекста, Ложь, ПараметрыПодключения.РевизияИнтерфейса);
		Попытка
			Для Каждого ТекстПечати Из ДанныеЧека Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если НЕ Результат Тогда
					ТекстОшибки = "";
					ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
					ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
					Результат = Ложь;
					Возврат Результат;
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Вставить("НомерЧека",  0);
					ВыходныеПараметры.Вставить("НомерСмены", 0);
					ВыходныеПараметры.Вставить("ФискальныйПризнак" , Неопределено);
					ВыходныеПараметры.Вставить("АдресСайтаПроверки", Неопределено);
					ВыходныеПараметры.Вставить("РегистрационныйНомерККТ", Неопределено);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Результат = Ложь;  
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокиТекста);
		Попытка
			Для Каждого ТекстПечати Из ДанныеЧека Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если Не Результат Тогда
					ТекстОшибки = "";
					ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
					ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Результат = Ложь;  
			Возврат Результат;
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы 
//
Функция Инкассация(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
		
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда         
		
		Сумма = ?(ВходныеПараметры.Внесение, ВходныеПараметры.Сумма, -ВходныеПараметры.Сумма);
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, Сумма);
			Иначе
				Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, Сумма);
			КонецЕсли;
			Если НЕ Результат Тогда
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.'") + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Результат = Ложь;  
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		
		ФорматЧисла = "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0";
		ТекстОтчета = НСтр("ru='СУММА = '") + Формат(ВходныеПараметры.Сумма, ФорматЧисла);
		СтрокиТекста = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоДокумента(?(ВходныеПараметры.Внесение, 2, 3), ВходныеПараметры, ШиринаСтроки, ТекстОтчета);
		ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
		Результат = ПечатьТекста(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	Результат = Истина;
	
	Если ПараметрыПодключения.Свойство("ШиринаСтроки") Тогда
		ВыходныеПараметры.Вставить("ШиринаСтроки", ПараметрыПодключения.ШиринаСтроки);
	Иначе
		ШиринаСтроки = 0;
		Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Вставить("ШиринаСтроки"   , ШиринаСтроки);
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДенежныйЯщик>.'")  + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет открытие смены.
//
Функция ПолучитьТекущееСостояние(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Попытка
		
		Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Иначе
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
		КонецЕсли;
	
		Если НЕ Результат Тогда
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
				НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
				НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				СтатусСмены    = ФискальныеДанныеСтруктура.СтатусСмены;
			Иначе
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния);
			КонецЕсли;
			
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("НомерСмены"    , НомерСмены);
			ВыходныеПараметры.Вставить("НомерДокумента", НомерДокумента);
			ВыходныеПараметры.Вставить("СтатусСмены"   , СтатусСмены);
			ВыходныеПараметры.Вставить("ПараметрыСостояния", ФискальныеДанныеСтруктура);
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие смены.
//
Функция ПолучитьПараметрыККТ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыККТ = "";
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса; 
	
	Попытка
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Если НЕ Результат Тогда
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПараметрыИзXMLПакетаККТ(ПараметрыККТ, РевизияИнтерфейса);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет операцию с фискальным какопителем.
//
Функция ОперацияФискальногоНакопителя(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ТипОперации = ВходныеПараметры.ТипОперации;
	Кассир = "";
	
	ПараметрыФискализацииXML = МенеджерОборудованияВызовСервера.СформироватьТаблицуПараметровДляОперацииФН(ВходныеПараметры);
	
	Попытка
		Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ТипОперации, Кассир, ПараметрыФискализацииXML);
		Если НЕ Результат Тогда
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Открыть сессию регистрации КМ.
//
// Параметры:
// 	Параметры - Структура - где:
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Или РевизияИнтерфейса < 3004 Тогда
		ТекстОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИДУстройства);
	Если НЕ ПустаяСтрока(ИдентификаторСессии) Тогда  
		ТекстОшибки = НСтр("ru='Сессия проверки кодов маркировки уже открыта.'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.ОткрытьСессиюРегистрацииКМ(ПараметрыПодключения.ИДУстройства);
		Если НЕ Результат Тогда
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ИдентификаторСессии = Строка(Новый УникальныйИдентификатор);
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ИдентификаторСессии", ИдентификаторСессии);
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИДУстройства, ИдентификаторСессии);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСессиюРегистрацииКМ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Закрыть сессию регистрации КМ.
//
// Параметры:
// 	Параметры - Структура - где:
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ЗакрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Или РевизияИнтерфейса < 3004 Тогда
		ТекстОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИДУстройства);
	Если ПустаяСтрока(ИдентификаторСессии) Тогда  
		Результат = Истина;
		ВыходныеПараметры.Очистить();
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.ЗакрытьСессиюРегистрацииКМ(ПараметрыПодключения.ИДУстройства);
		Если НЕ Результат Тогда
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ИдентификаторСессии = Строка(Новый УникальныйИдентификатор);
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			МенеджерОборудованияКлиент.УстановитьСессиюПроверкиКодовМаркировки(ПараметрыПодключения.ИДУстройства);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСессиюРегистрацииКМ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Запрос КМ.
//
// Параметры:
// 	Параметры - Структура - где:
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ЗапросКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Или РевизияИнтерфейса < 3004 Тогда
		ТекстОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторСессии = МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ПараметрыПодключения.ИДУстройства);
	Если ПустаяСтрока(ИдентификаторСессии) Тогда  
		ВремВыходныеПараметры = Новый Структура();   
		Результат = ОткрытьСессиюРегистрацииКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВремВыходныеПараметры);
		Если Не Результат Тогда
			ВыходныеПараметры = ВремВыходныеПараметры;
			Возврат Результат;
		Иначе
			ИдентификаторСессии = ВремВыходныеПараметры.ИдентификаторСессии;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторЗапроса = ?(ВходныеПараметры.Свойство("ИдентификаторЗапроса"), ВходныеПараметры.ИдентификаторЗапроса, Неопределено);
	
	ПараметрыОперацииXML = МенеджерОборудованияВызовСервера.СформироватьXMLДляЗапросаКМ(ВходныеПараметры, РевизияИнтерфейса);
	РезультатОперацииXML = "";
	Попытка
		Результат = ОбъектДрайвера.ЗапросКМ(ПараметрыПодключения.ИДУстройства, ПараметрыОперацииXML, РезультатОперацииXML);
		Если НЕ Результат Тогда                             
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПолучитьРезультатыЗапросаКМИзXMLПакета(РезультатОперацииXML);
			ВыходныеПараметры.Вставить("ЗапросXML"   , ПараметрыОперацииXML);
			ВыходныеПараметры.Вставить("РезультатXML", РезультатОперацииXML);
			ВыходныеПараметры.Вставить("ИдентификаторСессии" , ИдентификаторСессии);
			ВыходныеПараметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗапросКМ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Запрос КМ.
//
// Параметры:
// 	Параметры - Структура - где:
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ПодтвердитьКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Или РевизияИнтерфейса < 3004 Тогда
		ТекстОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторЗапроса = ?(ВходныеПараметры.Свойство("ИдентификаторЗапроса"), ВходныеПараметры.ИдентификаторЗапроса, Неопределено);
	Выбытие = ?(ВходныеПараметры.Свойство("Выбытие"), ВходныеПараметры.Выбытие, Истина);
	
	Если ПустаяСтрока(ИдентификаторЗапроса) Тогда
		ТекстОшибки = НСтр("ru='Идентификатор запроса КМ не указан.'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
		
	Попытка
		Результат = ОбъектДрайвера.ПодтвердитьКМ(ПараметрыПодключения.ИДУстройства, ИдентификаторЗапроса, ?(Выбытие, 0, 1));
		Если НЕ Результат Тогда                             
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры = Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ПодтвердитьКМ.ЗапросКМ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получить результаты запроса КМ.
//
// Параметры:
// 	Параметры - Структура - где:
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ПолучитьРезультатыЗапросаКМ(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Или РевизияИнтерфейса < 3004 Тогда
		ТекстОшибки = НСтр("ru='Драйвер не поддерживает операцию.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	СтатусЗапроса = 0;
	РезультатОперацииXML = "";
	Попытка
		Результат = ОбъектДрайвера.ПолучитьРезультатыЗапросаКМ(ПараметрыПодключения.ИДУстройства, РезультатОперацииXML, СтатусЗапроса);
		Если НЕ Результат Тогда
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПолучитьРезультатыОИСМКМИзXMLПакета(РезультатОперацииXML);
			ВыходныеПараметры.СтатусРезультата = МенеджерОборудованияКлиентСервер.СтатусРезультатаЗапросаКМПоКоду(СтатусЗапроса);
			ВыходныеПараметры.Вставить("РезультатXML", РезультатОперацииXML);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ПодтвердитьКМ.ПолучитьРезультатыЗапросаКМ>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляRFIDСчитывателей

// Функция получения данные меток RFID считывателя.
//
Функция ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, ИДПакета, ТаблицаМеток, ВыходныеПараметры) 
	
	Результат = Истина;
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьДанныеМетокRFID(ПараметрыПодключения.ИДУстройства, ИДПакета, ТаблицаМеток);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьДанныеМетокRFID>.'") + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция открывает сессию RFID считывателя.
//
Функция ОткрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСессиюRFID>.'") + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция закрывает сессию RFID считывателя.
//
Функция ЗакрытьСессиюRFID(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСессиюRFID>.'") + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция записывает данные в метку RFID.
//
Функция ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Таймаут = ?(ВходныеПараметры.Свойство("Таймаут"), ВходныеПараметры.Таймаут, 0);
	TID = ВходныеПараметры.TID;
	EPC = ВходныеПараметры.EPC;
	Данные = ВходныеПараметры.Данные;
	БанкПамяти = ?(ВходныеПараметры.БанкПамяти = "EPC", 1, 2);
	
	Попытка
		Ответ = ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ИДУстройства, TID, EPC, Данные, БанкПамяти, Таймаут);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID>.'") + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляДисплеевПокупателя

// Функция осуществляет вывод списка строк на дисплей покупателя.
//
Функция ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Текст = ?(ВходныеПараметры.Свойство("Текст"), ВходныеПараметры.Текст, "");
	Попытка
		Ответ = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, Текст);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьДисплейПокупателя>.'")  + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	                         
	Возврат Результат;
	
КонецФункции        

// Функция осуществляет вывод QR кода на дисплей покупателя.
//
Функция ВыводQRКодаНаДисплеяПокупателя(ОбъектДрайвера, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Текст = ?(ВходныеПараметры.Свойство("Текст"), ВходныеПараметры.Текст, "");
	ЗначениеQRКода = ?(ВходныеПараметры.Свойство("ЗначениеQRКода"), ВходныеПараметры.ЗначениеQRКода, "");
	КартинкаQRКода = ""; 
	
	Если Не ПустаяСтрока(Текст) Тогда 
		Попытка
			Ответ = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ТекстОшибки = "";
				ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
				ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьДисплейПокупателя>.'")  + Символы.ПС + ОписаниеОшибки(); 
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
			Результат = Ложь;
		КонецПопытки;  
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ВывестиQRКодНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, ЗначениеQRКода, КартинкаQRКода);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры вывода на дисплей покупателя.
//
Функция ПолучитьПараметрыВывода(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	СтолбцовНаДисплее = 20; 
	СтрокНаДисплее    = 2;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("СтолбцовНаДисплее", СтолбцовНаДисплее);
			ВыходныеПараметры.Вставить("СтрокНаДисплее"   , СтрокНаДисплее);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыВывода>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭлектронныхВесов

// Функция осуществляет получение веса груза, расположенного на весах.
//
Функция ПолучитьВес(ОбъектДрайвера, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	Вес = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ТекстОшибки = "";
			ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Вставить("Вес", Вес);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьВес>.'") + Символы.ПС + ОписаниеОшибки(); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
