
#Область ПрограммныйИнтерфейс

// Возвращает номер версии библиотеки подключаемого оборудования.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.21.1";
	
КонецФункции

// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 3003;
	Возврат РевизияИнтерфейса;
	
КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента.
//
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера.
//
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт
	
	Если Не МенеджерОборудованияВызовСервераПереопределяемый.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);
	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокКомпьютеров;
	
КонецФункции
 
// Функция устанавливает в переменную сеанса имя компьютера клиента.
//
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция возвращает созданное рабочее место клиента.
//
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();
	РабочееМесто.Код = Параметры.ИдентификаторКлиента;
	
	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());
	
	РабочееМесто.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;
	
КонецФункции

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию.
//
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса.
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		Иначе
			ТекущееРМ = СписокРМ[0];
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список подключенного оборудование в справочнике ПО.
//
Функция ОборудованиеПоПараметрам(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыПО, Идентификатор, РабочееМесто);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Получает ссылку предопределенного элемента по его полному имени.
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника
//
Функция СохранитьПараметрыУстройства(ИдентификаторУстройства, Параметры) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(ИдентификаторУстройства, Параметры);
	
КонецФункции

// Получение макета драйвера с сервера
//
Функция ПолучитьМакетДрайвера(ИмяМакета) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	
КонецФункции

// Функция возвращает структуру с данными устройства
//
Функция ПолучитьДанныеУстройства(ИдентификаторУстройства) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	
КонецФункции

// Функция возвращает структуру с данными драйвера
//
Функция ПолучитьДанныеДрайвера(ИдентификаторДрайвера) Экспорт
	
	Возврат Справочники.ДрайверыОборудования.ПолучитьСписокДрайверов(ИдентификаторДрайвера);
	
КонецФункции

// Получить описание драйвера XML пакета.
//
Функция ПолучитьОписаниеДрайвера(Данные) Экспорт
	
	Параметры = Новый Структура();
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DriverDescription" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НаименованиеДрайвера      = ЧтениеXML.ЗначениеАтрибута("Name");
			ОписаниеДрайвера          = ЧтениеXML.ЗначениеАтрибута("Description");
			ТипОборудования           = ЧтениеXML.ЗначениеАтрибута("EquipmentType");
			ВерсияДрайвера            = ЧтениеXML.ЗначениеАтрибута("DriverVersion");
			ВерсияИнтеграционногоКомпонента = ЧтениеXML.ЗначениеАтрибута("IntegrationComponentVersion");
			ИнтеграционныйКомпонент   = ВРег(ЧтениеXML.ЗначениеАтрибута("IntegrationComponent")) = "TRUE";
			ОсновнойДрайверУстановлен = ВРег(ЧтениеXML.ЗначениеАтрибута("MainDriverInstalled")) = "TRUE";
			URLЗагрузкиДрайвера       = ЧтениеXML.ЗначениеАтрибута("DownloadURL");
			Параметры.Вставить("НаименованиеДрайвера", НаименованиеДрайвера);
			Параметры.Вставить("ОписаниеДрайвера", ОписаниеДрайвера);
			Параметры.Вставить("ТипОборудования", ТипОборудования);
			Параметры.Вставить("ВерсияДрайвера", ВерсияДрайвера);
			Параметры.Вставить("ВерсияИнтеграционногоКомпонента", ВерсияИнтеграционногоКомпонента);
			Параметры.Вставить("ИнтеграционныйКомпонент", ИнтеграционныйКомпонент);
			Параметры.Вставить("ОсновнойДрайверУстановлен", ОсновнойДрайверУстановлен);
			Параметры.Вставить("URLЗагрузкиДрайвера", URLЗагрузкиДрайвера);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

#Область ПрограммныйИнтерфейсККТ

// Возвращает, для каких типов идентификаторов будет заполняться код товара.
//
// Возвращаемое значение: 
//  Массив - Массив Перечисления.ТипыИдентификаторовТовараККТ.
//
Функция КодТовараЗаполняетсяДляТиповИдентификаторов() Экспорт;
	
	ТипыИдентификаторов = Новый Массив();
	ТипыИдентификаторов.Добавить(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1);
	ТипыИдентификаторов.Добавить(Перечисления.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха);
	ТипыИдентификаторовОбработка = ТипыИдентификаторов;
	ВыполненаСтандартнаяОбработка = Истина; 
	МенеджерОборудованияВызовСервераПереопределяемый.КодТовараЗаполняетсяДляТиповИдентификаторов(ТипыИдентификаторовОбработка, ВыполненаСтандартнаяОбработка);
	Если ВыполненаСтандартнаяОбработка Тогда
		Результат = ТипыИдентификаторов
	Иначе
		Результат = ТипыИдентификаторовОбработка
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает для каких типов товаров будет заполняться отраслевой реквизит.
//
// Возвращаемое значение:
//   Структура: 
//  * ИзделияИзНатуральногоМеха - Булево - Заполнения для изделия из натурального меха. 
//  * ОбъемноСортовойУчет - Булево - Заполнения для товаров объемно сортового учета.
//  * МолочнаяПродукцияСНечитаемымиКМ - Булево - Заполнения для молочной продукция с нечитаемыми КМ.
//
Функция ТипыТоваровДляЗаполненияОтраслевогоРеквизита() Экспорт;
	
	ТипыТоваров = Новый Структура();
	ТипыТоваров.Вставить("ИзделияИзНатуральногоМеха", Ложь);
	ТипыТоваров.Вставить("ОбъемноСортовойУчет", Ложь);
	ТипыТоваров.Вставить("МолочнаяПродукцияСНечитаемымиКМ", Ложь);
	Возврат ТипыТоваров;
	
КонецФункции   

// Возвращает для каких типов товаров будет заполняться отраслевой реквизит.
//
// Возвращаемое значение:
//   Структура - см.ТипыТоваровДляЗаполненияОтраслевогоРеквизита()  
//
Функция ОтраслевойРеквизитЗаполняетсяДляТиповТоваров() Экспорт
	
	ТипыТоваров = ТипыТоваровДляЗаполненияОтраслевогоРеквизита();
	МенеджерОборудованияВызовСервераПереопределяемый.ОтраслевойРеквизитЗаполняетсяДляТиповТоваров(ТипыТоваров);
	Возврат ТипыТоваров;
	
КонецФункции

// Возвращает ведется объемно сортовой учет.
//
// Возвращаемое значение:
//  Булево.
//           
Функция ВедетсяОбъемноСортовойУчет() Экспорт
	
	Результат = Ложь;
	ОбъемноСортовойУчет = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияВызовСервераПереопределяемый.ВедетсяОбъемноСортовойУчет(ОбъемноСортовойУчет, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ОбъемноСортовойУчет);
	Возврат Результат; 
	
КонецФункции

// Идентифицирует ли код товара (значение тега 1162) экземпляр товара.
//
// Параметры:
//   РеквизитКодаТовара - Строка - Значение реквизита кода товара в BASE64.
//   ШтриховойКодТовара - Строка - Штриховой код товара.
//
// Возвращаемое значение:
//  Булево - Истина - Если код товара идентифицирует экземпляр товара.
//
Функция КодТовараИдентифицируетЭкземпляр(Знач РеквизитКодаТовара = Неопределено, Знач ШтриховойКодТовара = Неопределено) Экспорт
	
	Результат = Ложь;
	// Если реквизит кода товара (1162)  не передается в готовом виде
	Если ПустаяСтрока(РеквизитКодаТовара) Тогда
		ДанныеКодаТовара = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ШтриховойКодТовара);
		РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(РеквизитКодаТовара) Тогда
		ТипыИдентификаторов = КодТовараЗаполняетсяДляТиповИдентификаторов();
		НачалоРеквизитКодаТовара = Лев(РеквизитКодаТовара, 3); 
		Если НачалоРеквизитКодаТовара = "RE0" Тогда // GS1 Data Matrix или Data Matrix  - Если первые 2 байта значения кода товара имеют значения "44h4Dh".
			Результат = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1) <> Неопределено;
		ИначеЕсли НачалоРеквизитКодаТовара = "UkZ" Тогда // Меховые изделия - Если первые 2 байта значения кода товара имеют значения "52h46h".
			Результат = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха) <> Неопределено;
		ИначеЕсли НачалоРеквизитКодаТовара = "xRR" Тогда // ЕГАИС 2.0 - Если первые 2 байта значения кода товара имеют значения "C5h14h".
			Результат = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2) <> Неопределено;
		ИначеЕсли НачалоРеквизитКодаТовара = "xR4" Тогда // ЕГАИС 3.0 - Если первые 2 байта значения кода товара имеют значения "C5h1Eh".
			Результат = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3) <> Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу параметров в XML для операции с ФН.
//
// Параметры:
//  СтруктураПараметров - Структура
//  РевизияИнтерфейса - Число - Ревизия интерфейса
//
// Возвращаемое значение:
// ЗаписьXML.
//
Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ParametersFiscal");
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(?(СтруктураПараметров.Свойство("Кассир")   , XMLСтрока(СтруктураПараметров.Кассир), НСтр("ru='Администратор'"))));
		ЗаписьXML.ЗаписатьАтрибут("CashierINN"  , XMLСтрока(?(СтруктураПараметров.Свойство("КассирИНН"), XMLСтрока(СтруктураПараметров.КассирИНН), "")));
		// Код причины перерегистрации.
		ЗаписьXML.ЗаписатьАтрибут("RegistrationReasonCode", XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
		// Коды причин изменения сведений о ККТ.
		Если Не ПустаяСтрока(СтруктураПараметров.КодыПричинИзмененияСведений) Тогда
			ЗаписьXML.ЗаписатьАтрибут("RegistrationLabelCodes", XMLСтрока(СтруктураПараметров.КодыПричинИзмененияСведений));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("KKTNumber"         , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
		ЗаписьXML.ЗаписатьАтрибут("CompanyName"       , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
		ЗаписьXML.ЗаписатьАтрибут("INN"               , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
		ЗаписьXML.ЗаписатьАтрибут("SaleAddress"       , XMLСтрока(СтруктураПараметров.АдресПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("SaleLocation"      , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("TaxationSystems"   , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("IsOffline"         , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
		ЗаписьXML.ЗаписатьАтрибут("IsEncrypted"       , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
		ЗаписьXML.ЗаписатьАтрибут("IsService"         , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
		ЗаписьXML.ЗаписатьАтрибут("IsExcisable"       , XMLСтрока(СтруктураПараметров.ПродажаПодакцизногоТовара));
		ЗаписьXML.ЗаписатьАтрибут("IsGambling"        , XMLСтрока(СтруктураПараметров.ПроведенияАзартныхИгр));
		ЗаписьXML.ЗаписатьАтрибут("IsLottery"         , XMLСтрока(СтруктураПараметров.ПроведенияЛотерей));
		ЗаписьXML.ЗаписатьАтрибут("AgentTypes"        , XMLСтрока(СтруктураПараметров.ПризнакиАгента));
		ЗаписьXML.ЗаписатьАтрибут("BSOSing"           , XMLСтрока(СтруктураПараметров.ПризнакФормированияБСО));
		ЗаписьXML.ЗаписатьАтрибут("IsOnlineOnly"      , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
		Если РевизияИнтерфейса >= 3004 Тогда  // Версия стандарта 3.4 (ОФД 1.2)
			ЗаписьXML.ЗаписатьАтрибут("IsOnline"    , XMLСтрока(СтруктураПараметров.ПроведенияРасчетаВИнтернет));
			ЗаписьXML.ЗаписатьАтрибут("IsMarking"   , XMLСтрока(СтруктураПараметров.ПродажаМаркированныхТоваров));
			ЗаписьXML.ЗаписатьАтрибут("IsPawnshop"  , XMLСтрока(СтруктураПараметров.ПризнакПримененияЛомбардами));
			ЗаписьXML.ЗаписатьАтрибут("IsAssurance" , XMLСтрока(СтруктураПараметров.ПризнакДеятельностиПоСтрахованию));
		КонецЕсли;
		Если РевизияИнтерфейса >= 4000 Тогда  // Версия стандарта 4.0 (ОФД 1.2)
			ЗаписьXML.ЗаписатьАтрибут("IsVendingMachine"  , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоТорговогоАвтомата));
			ЗаписьXML.ЗаписатьАтрибут("IsCateringServices", XMLСтрока(СтруктураПараметров.ПризнакОказанииУслугОбщественногоПитания));
			ЗаписьXML.ЗаписатьАтрибут("IsWholesaleTrade"  , XMLСтрока(СтруктураПараметров.ПризнакОптовойТорговлиСОрганизациями));
		КонецЕсли;    
		ЗаписьXML.ЗаписатьАтрибут("IsAutomaticPrinter", XMLСтрока(СтруктураПараметров.УстановкаПринтераВАвтомате));
		ЗаписьXML.ЗаписатьАтрибут("IsAutomatic"       , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
		ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"   , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
		ЗаписьXML.ЗаписатьАтрибут("OFDCompany"        , XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
		ЗаписьXML.ЗаписатьАтрибут("OFDCompanyINN"     , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
		Если Не ПустаяСтрока(СтруктураПараметров.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(СтруктураПараметров.ОтправительEmail));
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.АдресСайтаФНС) Тогда
			ЗаписьXML.ЗаписатьАтрибут("FNSURL", XMLСтрока(СтруктураПараметров.АдресСайтаФНС));
		КонецЕсли;
	
	Иначе
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(?(СтруктураПараметров.Свойство("Кассир")   , XMLСтрока(СтруктураПараметров.Кассир), НСтр("ru='Администратор'"))));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(?(СтруктураПараметров.Свойство("КассирИНН"), XMLСтрока(СтруктураПараметров.КассирИНН), "")));
		// ФФД 1.0.0
		ЗаписьXML.ЗаписатьАтрибут("KKTNumber"          , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
		ЗаписьXML.ЗаписатьАтрибут("OFDVATIN"           , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
		ЗаписьXML.ЗаписатьАтрибут("OFDOrganizationName", XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
		ЗаписьXML.ЗаписатьАтрибут("OrganizationName"   , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
		ЗаписьXML.ЗаписатьАтрибут("VATIN"              , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
		ЗаписьXML.ЗаписатьАтрибут("AddressSettle"      , XMLСтрока(СтруктураПараметров.АдресПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("OfflineMode"        , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
		ЗаписьXML.ЗаписатьАтрибут("DataEncryption"     , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
		ЗаписьXML.ЗаписатьАтрибут("ServiceSign"        , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
		ЗаписьXML.ЗаписатьАтрибут("BSOSing"            , XMLСтрока(СтруктураПараметров.ПризнакФормированияБСО));
		ЗаписьXML.ЗаписатьАтрибут("CalcOnlineSign"     , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
		ЗаписьXML.ЗаписатьАтрибут("AutomaticMode"      , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
		ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"    , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
		// ФФД 1.05 & 1.1
		ЗаписьXML.ЗаписатьАтрибут("PlaceSettle"        , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("SaleExcisableGoods" , XMLСтрока(СтруктураПараметров.ПродажаПодакцизногоТовара));
		ЗаписьXML.ЗаписатьАтрибут("SignOfGambling"     , XMLСтрока(СтруктураПараметров.ПроведенияАзартныхИгр));
		ЗаписьXML.ЗаписатьАтрибут("SignOfLottery"      , XMLСтрока(СтруктураПараметров.ПроведенияЛотерей));
		ЗаписьXML.ЗаписатьАтрибут("SignOfAgent"        , XMLСтрока(СтруктураПараметров.ПризнакиАгента));
		ЗаписьXML.ЗаписатьАтрибут("PrinterAutomatic"   , XMLСтрока(СтруктураПараметров.УстановкаПринтераВАвтомате));
		// Изменение параметров регистрации.
		ЗаписьXML.ЗаписатьАтрибут("ReasonCode"         , XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
		Если Не ПустаяСтрока(СтруктураПараметров.КодыПричинИзмененияСведений) Тогда
			ЗаписьXML.ЗаписатьАтрибут("InfoChangesReasonsCodes", XMLСтрока(СтруктураПараметров.КодыПричинИзмененияСведений));
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(СтруктураПараметров.ОтправительEmail));
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.АдресСайтаФНС) Тогда
			ЗаписьXML.ЗаписатьАтрибут("FNSWebSite", XMLСтрока(СтруктураПараметров.АдресСайтаФНС));
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу параметров из ККТ.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыИзXMLПакетаККТ(Данные, РевизияИнтерфейса = 0) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	Параметры.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		Если (ЧтениеXML.Имя = "Parameters" Или ЧтениеXML.Имя = "TableParametersKKT") И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
			Если ПустаяСтрока(Параметры.ВерсияФФДФН) Тогда
				Параметры.ВерсияФФДФН = "1.0";
			КонецЕсли;
			Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
			Если ПустаяСтрока(Параметры.ВерсияФФДККТ) Тогда
				Параметры.ВерсияФФДККТ = "1.0";
			КонецЕсли;
			// ФФД 1.0
			Параметры.РегистрационныйНомерККТ    = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
			Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
			Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
			Параметры.ОрганизацияНазвание        = ЧтениеXML.ЗначениеАтрибута("CompanyName");
			Параметры.ОрганизацияИНН             = СокрЛП(ЧтениеXML.ЗначениеАтрибута("INN"));
			Параметры.АдресПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("SaleAddress");
			Параметры.МестоПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("SaleLocation");
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxationSystems");
			Параметры.ПризнакАвтономногоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("IsOffline")) = "TRUE";
			Параметры.ПризнакШифрованиеДанных    = ВРег(ЧтениеXML.ЗначениеАтрибута("IsEncrypted")) = "TRUE";
			Параметры.ПризнакРасчетовЗаУслуги    = ВРег(ЧтениеXML.ЗначениеАтрибута("IsService")) = "TRUE";
			Параметры.ПродажаПодакцизногоТовара  = ВРег(ЧтениеXML.ЗначениеАтрибута("IsExcisable")) = "TRUE";
			Параметры.ПроведенияАзартныхИгр      = ВРег(ЧтениеXML.ЗначениеАтрибута("IsGambling")) = "TRUE";
			Параметры.ПроведенияЛотерей          = ВРег(ЧтениеXML.ЗначениеАтрибута("IsLottery")) = "TRUE";
			Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("AgentTypes");
			Параметры.ПризнакФормированияБСО         = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
			Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("IsOnlineOnly")) = "TRUE";
			Параметры.УстановкаПринтераВАвтомате     = ВРег(ЧтениеXML.ЗначениеАтрибута("IsAutomaticPrinter")) = "TRUE";
			Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("IsAutomatic")) = "TRUE";
			Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
			Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDCompany");
			Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDCompanyINN"));
			Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
			Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
			Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
			Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
			Параметры.АдресСайтаФНС              = ЧтениеXML.ЗначениеАтрибута("FNSURL");
			Если РевизияИнтерфейса >= 3004 Тогда  // Версия стандарта 3.4 (ОФД 1.2)
				Параметры.ПроведенияРасчетаВИнтернет  = ВРег(ЧтениеXML.ЗначениеАтрибута("IsOnline")) = "TRUE";
				Параметры.ПродажаМаркированныхТоваров = ВРег(ЧтениеXML.ЗначениеАтрибута("IsMarking")) = "TRUE"; 
				Параметры.ПризнакПримененияЛомбардами = ВРег(ЧтениеXML.ЗначениеАтрибута("IsPawnshop")) = "TRUE"; 
				Параметры.ПризнакДеятельностиПоСтрахованию = ВРег(ЧтениеXML.ЗначениеАтрибута("IsAssurance")) = "TRUE"; 
			КонецЕсли;
			Если РевизияИнтерфейса >= 4000 Тогда  // Версия стандарта 4.0 (ОФД 1.2)
				Параметры.ПризнакАвтоматическогоТорговогоАвтомата = ВРег(ЧтениеXML.ЗначениеАтрибута("IsVendingMachine")) = "TRUE";   
				Параметры.ПризнакОказанииУслугОбщественногоПитания = ВРег(ЧтениеXML.ЗначениеАтрибута("IsCateringServices")) = "TRUE";  
				ПризнакОптовойТорговлиСОрганизациями = ЧтениеXML.ЗначениеАтрибута("IsWholesaleTrade"); 
				Если НЕ ПустаяСтрока(ПризнакОптовойТорговлиСОрганизациями) Тогда
					Параметры.ПризнакОптовойТорговлиСОрганизациями = ВРег(ПризнакОптовойТорговлиСОрганизациями) = "TRUE"; 
				КонецЕсли;
			КонецЕсли;    
		КонецЕсли;
		
	Иначе
		
		Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
			Если ПустаяСтрока(Параметры.ВерсияФФДФН) Тогда
				Параметры.ВерсияФФДФН = "1.0";
			КонецЕсли;
			Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
			Если ПустаяСтрока(Параметры.ВерсияФФДККТ) Тогда
				Параметры.ВерсияФФДККТ = "1.0";
			КонецЕсли;
			// ФФД 1.0
			Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
			Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
			Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
			Параметры.АдресПроведенияРасчетов        = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
			Параметры.МестоПроведенияРасчетов        = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
			Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
			Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
				Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
			КонецЕсли;
			Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
			Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
			Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
			Параметры.ПризнакФормированияБСО         = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
			Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
			Параметры.ПризнакШифрованиеДанных        = ВРег(ЧтениеXML.ЗначениеАтрибута("DataEncryption")) = "TRUE";
			Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
			Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
			Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
			Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
			Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
			Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
			Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
			Параметры.ПризнакРасчетовЗаУслуги    = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
			Параметры.ПродажаПодакцизногоТовара  = ВРег(ЧтениеXML.ЗначениеАтрибута("SaleExcisableGoods")) = "TRUE";
			Параметры.ПроведенияАзартныхИгр      = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfGambling")) = "TRUE";
			Параметры.ПроведенияЛотерей          = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfLottery")) = "TRUE";
			Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("SignOfAgent");
			Параметры.УстановкаПринтераВАвтомате = ВРег(ЧтениеXML.ЗначениеАтрибута("PrinterAutomatic")) = "TRUE";
			Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
			Параметры.АдресСайтаФНС              = ЧтениеXML.ЗначениеАтрибута("FNSWebSite");
		КонецЕсли;
		
	КонецЕсли;

	СистемыНалогообложения = Новый Массив();
	Если Не ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
		СистемыНалогообложенияВрем = СтрРазделить(Параметры.КодыСистемыНалогообложения, ",");
		Для Каждого ВремСНО Из СистемыНалогообложенияВрем Цикл
			СНО = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(ВремСНО));
			СистемыНалогообложения.Добавить(СНО);
		КонецЦикла;
		Параметры.Вставить("СистемыНалогообложения", СистемыНалогообложения);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирует XML пакет для Фискализация чека.
// Параметры: 
//   ОбщиеПараметры - Структура - параметры чека
//
// Процедура формирует XML пакет для Фискализация чека.
//
Функция СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, СуммаЧека, ШиринаСтроки = 32, РевизияИнтерфейса) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	Электронно   = ОбщиеПараметры.Электронно;

	ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	
	// Таблица оплат
	СуммаЧека = 0;
	СуммаНаличные       = 0;
	СуммаЭлектронно     = 0;
	СуммаПредоплата     = 0;
	СуммаПостоплата     = 0;
	СуммаПредоставление = 0; 
	
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Кассир = ОбщиеПараметры.Кассир;
	
	Если ОбщиеПараметры.Свойство("КассирФИО") И Не ПустаяСтрока(ОбщиеПараметры.КассирФИО) Тогда
		Кассир = ОбщиеПараметры.КассирФИО;
	КонецЕсли;
	Если ОбщиеПараметры.Свойство("КассирДолжность") И Не ПустаяСтрока(ОбщиеПараметры.КассирДолжность) Тогда
		Кассир = Кассир + " (" + ОбщиеПараметры.КассирДолжность + ")";
	КонецЕсли;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(Кассир));
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierINN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("OperationType", XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxationSystem" , XMLСтрока(СистемаНалогообложения));
		
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		Если РевизияИнтерфейса >= 4000 Тогда      
			Если ОбщиеПараметры.Свойство("СворачиватьОдинаковыеСтрокПриПечати") Тогда  
				ЗаписьXML.ЗаписатьАтрибут("GroupingPositionsWhenPrinting", XMLСтрока(ОбщиеПараметры.СворачиватьОдинаковыеСтрокПриПечати));
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ПокупательEmail") Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("ПокупательНомер") Тогда
			ПокупательНомер = ?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "");
			ПокупательНомер = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ПокупательНомер);
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(ПокупательНомер));
		КонецЕсли;
		
		Если РевизияИнтерфейса < 3004 Тогда
			
			Получатель = ОбщиеПараметры.Получатель;
			Если ПустаяСтрока(Получатель) Тогда
				Получатель = ОбщиеПараметры.СведенияОПокупателе.Покупатель;
			КонецЕсли;
			Если Не ПустаяСтрока(Получатель) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CustomerInfo", XMLСтрока(Получатель));
			КонецЕсли;
			
			ПолучательИНН = ОбщиеПараметры.ПолучательИНН;
			Если ПустаяСтрока(ПолучательИНН) Тогда
				ПолучательИНН = ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН;
			КонецЕсли;
			Если Не ПустаяСтрока(ПолучательИНН) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CustomerINN", XMLСтрока(ПолучательИНН));
			КонецЕсли;
		Иначе
			Если ОбщиеПараметры.Свойство("НомерАвтомата") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерАвтомата) Тогда
				ЗаписьXML.ЗаписатьАтрибут("AutomatNumber", XMLСтрока(ОбщиеПараметры.НомерАвтомата));
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда
			ПризнакАгента = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentType", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДанныеКоррекции") Тогда
			ЗаписатьДанныеКоррекции(ЗаписьXML, ОбщиеПараметры.ДанныеКоррекции);
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизитПользователя") Тогда
			ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ОбщиеПараметры.ДополнительныйРеквизитПользователя);
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента, РевизияИнтерфейса);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика, РевизияИнтерфейса);
		
		Если РевизияИнтерфейса >= 3004 Тогда
			ЗаписатьСведенияОПокупателе(ЗаписьXML, ОбщиеПараметры);
			ЗаписатьОперационныйРеквизит(ЗаписьXML, ОбщиеПараметры.ОперационныйРеквизит);
			ЗаписатьОтраслевойРеквизит(ЗаписьXML, ОбщиеПараметры.ОтраслевойРеквизит);
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда // Фискальная строка
					
					Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
						ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
					Иначе
						ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"              , XMLСтрока(ТекущаяПозиция.Наименование)); // Наименование товара.
					ЗаписьXML.ЗаписатьАтрибут("Quantity"          , XMLСтрока(ТекущаяПозиция.Количество)); // Количество товара.
					ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount" , XMLСтрока(ЦенаСоСкидками)); // Цена единицы товара с учетом скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("AmountWithDiscount", XMLСтрока(ТекущаяПозиция.Сумма)); // Конечная сумма по позиции чека с учетом всех скидок/наценок.
					Если Не ПустаяСтрока(ТекущаяПозиция.СуммаСкидок) Тогда
						ЗаписьXML.ЗаписатьАтрибут("DiscountAmount"    , XMLСтрока(ТекущаяПозиция.СуммаСкидок)); // Сумма скидок и наценок.
					КонецЕсли;
					ЗаписьXML.ЗаписатьАтрибут("Department"        , XMLСтрока(ТекущаяПозиция.НомерСекции)); // Отдел, по которому ведется продажа
					
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
							ЗначениеСтавкаНДС = "18/118";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
							ЗначениеСтавкаНДС = "10/110";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
							ЗначениеСтавкаНДС = "20/120";
						Иначе
							ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						КонецЕсли;
					Иначе
						ЗначениеСтавкаНДС = "none";
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("VATRate", XMLСтрока(ЗначениеСтавкаНДС)); // Ставка НДС
					Если ТекущаяПозиция.Свойство("СуммаНДС") Тогда
						ЗаписьXML.ЗаписатьАтрибут("VATAmount", XMLСтрока(ТекущаяПозиция.СуммаНДС));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
						ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("PaymentMethod", XMLСтрока(ПризнакСпособаРасчета));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
						ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета, РевизияИнтерфейса);
						Если ПризнакПредметаРасчета <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("CalculationSubject", XMLСтрока(ПризнакПредметаРасчета));
						КонецЕсли;
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
						ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
						ЗаписьXML.ЗаписатьАтрибут("CalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("КодСтраныПроисхожденияТовара") И НЕ ПустаяСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара) Тогда
						ЗаписьXML.ЗаписатьАтрибут("CountryOfOrigin", XMLСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("НомерТаможеннойДекларации") И НЕ ПустаяСтрока(ТекущаяПозиция.НомерТаможеннойДекларации) Тогда
						ЗаписьXML.ЗаписатьАтрибут("CustomsDeclaration", XMLСтрока(ТекущаяПозиция.НомерТаможеннойДекларации));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("СуммаАкциза") И ТекущаяПозиция.СуммаАкциза <> Неопределено Тогда
						Если Число(ТекущаяПозиция.СуммаАкциза) > 0 Тогда
							ЗаписьXML.ЗаписатьАтрибут("ExciseAmount", XMLСтрока(ТекущаяПозиция.СуммаАкциза));
						ИначеЕсли ПризнакПредметаРасчета <> Неопределено Тогда       
							Если ПризнакПредметаРасчета = 2 Или ПризнакПредметаРасчета = 30 Или ПризнакПредметаРасчета = 31 Тогда      
						ЗаписьXML.ЗаписатьАтрибут("ExciseAmount", XMLСтрока(ТекущаяПозиция.СуммаАкциза));
					КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ДополнительныйРеквизит") Тогда // Тэг 1191
						
						ДополнительныйРеквизит = "";
						Если НЕ ПустаяСтрока(ТекущаяПозиция.ДополнительныйРеквизит) Тогда
							ДополнительныйРеквизит = ТекущаяПозиция.ДополнительныйРеквизит;
						ИначеЕсли ВедетсяОбъемноСортовойУчет() И ТекущаяПозиция.ОбъемноСортовойУчет И РевизияИнтерфейса < 3004 Тогда  
							// Передача сведений об объемно сортовой товара при оптовой продаже через ККТ
							ДополнительныйРеквизит = "crpt=mrk";                                            
							Если ТекущаяПозиция.ДвижениеЧерезУПД Тогда
								ДополнительныйРеквизит = ДополнительныйРеквизит + "&mode=osu"; 
							КонецЕсли;        
						ИначеЕсли ТекущаяПозиция.Свойство("ДробноеКоличество") И РевизияИнтерфейса < 3004 Тогда
							// Дробное количество, рекомендации ЦРПТ "ВЫВОД ТОВАРА ИЗ ОБОРОТА ПРИ РЕАЛИЗАЦИИ КОНЕЧНЫМ ПОТРЕБИТЕЛЯМ (ЧАСТИЧНАЯ ПРОДАЖА)"
							// для 1.05 и 1.1 - пишем в 1191, Формирование и  передача фискального  документа в ГИС МТ 
							Если Не ПустаяСтрока(ТекущаяПозиция.ДробноеКоличество.Числитель) И Не ПустаяСтрока(ТекущаяПозиция.ДробноеКоличество.Знаменатель) Тогда
								Числитель = Число(ТекущаяПозиция.ДробноеКоличество.Числитель);
								Знаменатель = Число(ТекущаяПозиция.ДробноеКоличество.Знаменатель);
								ДополнительныйРеквизит = "mrk"; // Префикс «mrk», если  после «mrk» указание  дробной  части  отсутствует, упаковка считается выведенной из оборота полностью.
								Если Числитель <> Знаменатель Тогда
									ДополнительныйРеквизит = ДополнительныйРеквизит + Строка(Числитель) + "/" + Строка(Знаменатель) + "&"; 
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если Не ПустаяСтрока(ДополнительныйРеквизит) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ДополнительныйРеквизит));  // Тэг 1191
						КонецЕсли;
					КонецЕсли;
					
					Если РевизияИнтерфейса >= 3004 Тогда
						
						Если Не ПустаяСтрока(ТекущаяПозиция.КонтрольнаяМарка) Тогда
							ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(ТекущаяПозиция.КонтрольнаяМарка));
						КонецЕсли;
						
						ДробноеКоличествоУказано = Ложь;
						ДробноеКоличество = ТекущаяПозиция.ДробноеКоличество;
						Если Не ПустаяСтрока(ДробноеКоличество.Числитель) И Не ПустаяСтрока(ДробноеКоличество.Знаменатель) Тогда
							Если Число(ДробноеКоличество.Числитель) > 0 И Число(ДробноеКоличество.Знаменатель) > 0 Тогда
								ДробноеКоличествоУказано = Истина;
							КонецЕсли;
						КонецЕсли;
						
						Если ДробноеКоличествоУказано Тогда            
							МераКоличестваПредметаРасчета = 0;
							ЗаписьXML.ЗаписатьАтрибут("MeasureOfQuantity", XMLСтрока(МераКоличестваПредметаРасчета));  
								ЗаписьXML.ЗаписатьНачалоЭлемента("FractionalQuantity");
								ЗаписьXML.ЗаписатьАтрибут("Numerator", XMLСтрока(ДробноеКоличество.Числитель));
								ЗаписьXML.ЗаписатьАтрибут("Denominator", XMLСтрока(ДробноеКоличество.Знаменатель));
								ЗаписьXML.ЗаписатьКонецЭлемента();
						Иначе       
							Если ВедетсяОбъемноСортовойУчет() И ТекущаяПозиция.ОбъемноСортовойУчет Тогда 
								Если НЕ ПустаяСтрока(ТекущаяПозиция.КоличествоВесовогоТовара) Тогда
									МераКоличестваПредметаРасчета = 11; // Килограмм    
								Иначе
									МераКоличестваПредметаРасчета = 0; // шт.
							КонецЕсли;
							Иначе
								МераКоличестваПредметаРасчета = МенеджерОборудованияКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(ТекущаяПозиция.КодЕдиницыИзмерения);
								МераКоличестваПредметаРасчета = МенеджерОборудованияКлиентСервер.КодМерыКоличестваПредметаРасчетаККТ(МераКоличестваПредметаРасчета);
						КонецЕсли;
							ЗаписьXML.ЗаписатьАтрибут("MeasureOfQuantity", XMLСтрока(МераКоличестваПредметаРасчета));
					КонецЕсли;
					               
					Иначе
						Если ТекущаяПозиция.Свойство("ЕдиницаИзмерения") И ТекущаяПозиция.ЕдиницаИзмерения <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit", XMLСтрока(Лев(ТекущаяПозиция.ЕдиницаИзмерения, 16)));
						КонецЕсли;   
					КонецЕсли;
					Если ВедетсяОбъемноСортовойУчет() И ТекущаяПозиция.ОбъемноСортовойУчет Тогда
						ЗаполнитьОтраслевойРеквизитОбъемноСортовойУчет(ТекущаяПозиция);
					КонецЕсли;
					ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция, РевизияИнтерфейса);   
					ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента, РевизияИнтерфейса);
					ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика, РевизияИнтерфейса);
					Если РевизияИнтерфейса >= 3004 Тогда
						ЗаписатьОтраслевойРеквизит(ЗаписьXML, ТекущаяПозиция.ОтраслевойРеквизит);
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
			
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда // Текстовая строка
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
					
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда // Штрихкод
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("Type" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
					Если РевизияИнтерфейса >= 3003 Тогда
						ШтрихКодBase64 = ШтрихкодВBase64(ТекущаяПозиция.ШтрихКод);
						Если ТекущаяПозиция.Свойство("ШтрихКодBase64") И 
							НЕ ПустаяСтрока(ТекущаяПозиция.ШтрихКодBase64) Тогда
							ШтрихКодBase64 = ТекущаяПозиция.ШтрихКодBase64;
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
			ЗаписьXML.ЗаписатьАтрибут("PrePayment", XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьАтрибут("PostPayment", XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("Barter", XMLСтрока(СуммаПредоставление));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	ИначеЕсли РевизияИнтерфейса > 2001 Тогда  // Версия стандарта 2.2 и выше
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType" , XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"  , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ПокупательНомер = ?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "");
			Если Не ПустаяСтрока(ПокупательНомер) И Лев(ПокупательНомер, 1) <> "+" Тогда
				ПокупательНомер = "+" + ПокупательНомер;
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(ПокупательНомер));
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда  // Атрибут с ФФД 1.0.5 
			ПризнакАгента = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentSign", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("AddressSettle", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("PlaceSettle", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerInfo", XMLСтрока(ОбщиеПараметры.Получатель));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerINN", XMLСтрока(ОбщиеПараметры.ПолучательИНН));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизитПользователя") Тогда
			ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ОбщиеПараметры.ДополнительныйРеквизитПользователя);
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
							ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
						Иначе
							ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
						КонецЕсли;
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"             , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ЦенаСоСкидками));
						ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
						ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
						
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						
						Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
							ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
							ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
							Если ПризнакПредметаРасчета <> Неопределено Тогда
								ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
							КонецЕсли;
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("СуммаНДС") И НЕ ПустаяСтрока(ТекущаяПозиция.СуммаНДС) Тогда
						ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
							ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ЕдиницаИзмерения") И ТекущаяПозиция.ЕдиницаИзмерения <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit", XMLСтрока(Лев(ТекущаяПозиция.ЕдиницаИзмерения, 16)));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("КодСтраныПроисхожденияТовара") И НЕ ПустаяСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара) Тогда
							ЗаписьXML.ЗаписатьАтрибут("CountryOfOrigin", XMLСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("НомерТаможеннойДекларации") И НЕ ПустаяСтрока(ТекущаяПозиция.НомерТаможеннойДекларации) Тогда
							ЗаписьXML.ЗаписатьАтрибут("CustomsDeclaration", XMLСтрока(ТекущаяПозиция.НомерТаможеннойДекларации));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("СуммаАкциза") И ТекущаяПозиция.СуммаАкциза <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("ExciseAmount", XMLСтрока(XMLСтрока(ТекущаяПозиция.СуммаАкциза)));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ТекущаяПозиция.ДополнительныйРеквизит) Тогда
							ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(XMLСтрока(ТекущаяПозиция.ДополнительныйРеквизит)));
						КонецЕсли;
						
						ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
						ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
						ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция, РевизияИнтерфейса);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
			ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, РевизияИнтерфейса) Экспорт
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		СуммаЧека = 0;
		Результат = СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, СуммаЧека, ,РевизияИнтерфейса);
		
	Иначе
		ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
		СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		
		Если ОбщиеПараметры.Свойство("ДанныеКоррекции") Тогда
			ДанныеКоррекции = ОбщиеПараметры.ДанныеКоррекции;
			ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
			ЗаписьXML.ЗаписатьАтрибут("CorrectionType",  XMLСтрока(ТипКоррекции));
			Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseDate",  XMLСтрока(НачалоДня(ДанныеКоррекции.ДатаКоррекции)));
			КонецЕсли;
			Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseNumber",  XMLСтрока(ДанныеКоррекции.НомерПредписания));
			КонецЕсли;
			Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseName",  XMLСтрока(ДанныеКоррекции.ОписаниеКоррекции));
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		СуммаЧека   = 0;
		СуммаНДС10  = 0;
		СуммаНДС18  = 0;
		СуммаНДС20  = 0;
		СуммаНДС110 = 0;
		СуммаНДС118 = 0;
		СуммаНДС120 = 0;
		СуммаНДС0   = 0;
		СуммаБезНДС = 0;
		
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ПозицияЧека = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
					
					СуммаЧека = СуммаЧека + ПозицияЧека.Сумма; // Сумма позиции
					СтавкаНДС = ПозицияЧека.СтавкаНДС; // Ставка НДС
					СуммаНДС = ?(ПустаяСтрока(ПозицияЧека.СуммаНДС), 0, ПозицияЧека.СуммаНДС);  // Сумма НДС
					Если СтавкаНДС = 10 Тогда
						СуммаНДС10 = СуммаНДС10 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 110 * 10);
					ИначеЕсли СтавкаНДС = 18 Тогда
						СуммаНДС18 = СуммаНДС18 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 118 * 18);
					ИначеЕсли СтавкаНДС = 20 Тогда
						СуммаНДС20 = СуммаНДС20 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 120 * 20);
					ИначеЕсли СтавкаНДС = 0 Тогда
						СуммаНДС0 = СуммаНДС0 + ПозицияЧека.Сумма;
					ИначеЕсли СтавкаНДС = 110 Тогда
						СуммаНДС110 = СуммаНДС110 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 110 * 10);
					ИначеЕсли СтавкаНДС = 118 Тогда
						СуммаНДС118 = СуммаНДС118 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 118 * 18);
					ИначеЕсли СтавкаНДС = 120 Тогда
						СуммаНДС120 = СуммаНДС120 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 120 * 20);
					Иначе 
						СуммаБезНДС = СуммаБезНДС + ПозицияЧека.Сумма;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		СуммаНаличные       = 0;
		СуммаЭлектронно     = 0;
		СуммаПостоплата     = 0;
		СуммаПредоплата     = 0;
		СуммаПредоставление = 0;
		ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат; 
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьАтрибут("Sum"       , XMLСтрока(СуммаЧека));
		ЗаписьXML.ЗаписатьАтрибут("SumTAXNone", XMLСтрока(СуммаБезНДС)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX0"   , XMLСтрока(Окр(СуммаНДС0, 2)));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX10"  , XMLСтрока(Окр(СуммаНДС10, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX18"  , XMLСтрока(Окр(СуммаНДС18, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX20"  , XMLСтрока(Окр(СуммаНДС20, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX110" , XMLСтрока(Окр(СуммаНДС110, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX118" , XMLСтрока(Окр(СуммаНДС118, 2)));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX120" , XMLСтрока(Окр(СуммаНДС120, 2)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
		ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
		ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
		ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
		ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Результат = ЗаписьXML.Закрыть();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры, РевизияИнтерфейса = 0) Экспорт
	
	КассирФИО = "";
	Кассир = НСтр("ru='Администратор'");
	КассирИНН = "";
	
	Если ОбщиеПараметры <> Неопределено Тогда
		КассирФИО = ?(ОбщиеПараметры.Свойство("КассирФИО"), ОбщиеПараметры.КассирФИО, "");
		Кассир = КассирФИО + ?(ОбщиеПараметры.Свойство("КассирДолжность"), " (" + ОбщиеПараметры.КассирДолжность + ")", "");
		КассирИНН = ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), "");
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьАтрибут("CashierName", XMLСтрока(Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierINN" , КассирИНН);
		Если ОбщиеПараметры <> Неопределено Тогда
			Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
				ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
			КонецЕсли;
			Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
				ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", КассирИНН);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляТекста(СтрокаТекста, ИнтеграционноеПриложение = Ложь, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
	ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");   
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
		
		ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
		
		Если ((Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
			 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0))
			 И НомерСтроки < СтрЧислоСтрок(СтрокаТекста) Тогда
			 
			// Завершаем запись текущего пакета. 
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			Текст = ЗаписьXML.Закрыть();
			Результат.Добавить(Текст);
			
			// Новый пакет.
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку("UTF-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			
		ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
			ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
			ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
			ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
			Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
				ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ВремТипШтрихкода));
				// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
				Если РевизияИнтерфейса >= 3003 Тогда
					ШтрихКодBase64 = ШтрихкодВBase64(ВремШтрихКод);
					ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ВремШтрихКод));
				КонецЕсли;
		Иначе
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
			КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

// Получить параметры состояния из XML пакета.
//
Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные, НомерСмены = Неопределено) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров смены из ККТ.
//
// Параметры:
//  ДанныеXML - Строка - строка XML
//  РевизияИнтерфейса - Число - ревизия интерфейса
//  НомерСменыККТ - Число - номер смены
//  НомерЧекаККТ - Число - номер чека
//
// Возвращаемое значение:
// Структура.
//
Функция ПолучитьПараметрыСменыИзXMLПакета(ДанныеXML, РевизияИнтерфейса = 0) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
			Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Параметры.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
					Параметры.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
					ДатаСменыККТ = ЧтениеXML.ЗначениеАтрибута("DateTime");
					Если НЕ ПустаяСтрока(ДатаСменыККТ) Тогда
						Параметры.ДатаСменыККТ = XMLЗначение(Тип("Дата"), ДатаСменыККТ);
					КонецЕсли;
					Параметры.НомерЧекаЗаСмену = ЧтениеXML.ЗначениеАтрибута("ShiftClosingCheckNumber");
					Параметры.СтатусСмены      = Число(ЧтениеXML.ЗначениеАтрибута("ShiftState"));
					Параметры.ОстатокНаличных  = ЧтениеXML.ЗначениеАтрибута("CashBalance");
					Параметры.НеобходимаСрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("FNError")) = "TRUE";
					Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("FNOverflow")) = "TRUE";
					Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("FNFail")) = "TRUE";
					КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
					Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
					Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
					ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
					Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
						Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Параметры.ПревышеноВремяОжиданияОтветаОФД = ВРег(ЧтениеXML.ЗначениеАтрибута("OFDtimeout")) = "TRUE";
					Параметры.НеобходимаСрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("UrgentReplacementFN")) = "TRUE";
					Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("MemoryOverflowFN")) = "TRUE";
					Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("ResourcesExhaustionFN")) = "TRUE";
					КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
					Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
					Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
					ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
					Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
						Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Заполнить результаты фискализация чека из XML пакета.
//
Функция РезультатыФискализацияЧекаИзXMLПакета(РезультатОперацииXML) Экспорт
	
	Результат = Новый Структура();
	
	Если Не ПустаяСтрока(РезультатОперацииXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(РезультатОперацииXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DocumentOutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				Результат.Вставить("НомерСменыККТ"     , ЧтениеXML.ЗначениеАтрибута("ShiftNumber"));
				Результат.Вставить("НомерЧекаККТ"      , ЧтениеXML.ЗначениеАтрибута("CheckNumber"));
				Результат.Вставить("НомерЧекаЗаСмену"  , ЧтениеXML.ЗначениеАтрибута("ShiftClosingCheckNumber"));
				Результат.Вставить("ФискальныйПризнак" , ЧтениеXML.ЗначениеАтрибута("FiscalSign"));
				Результат.Вставить("АдресСайтаПроверки", ЧтениеXML.ЗначениеАтрибута("AddressSiteInspections"));
				ДатаВремяЧека = ЧтениеXML.ЗначениеАтрибута("DateTime");
				Если НЕ ПустаяСтрока(ДатаВремяЧека) Тогда
					Результат.Вставить("ДатаВремяЧека", XMLЗначение(Тип("Дата"), ДатаВремяЧека));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить таблицу параметров состояния из ККТ.
//
Функция ПолучитьПараметрыСостоянияСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить пакет XML для печати на фискальном регистраторе.
//
Функция ПолучитьXMLПакетЧекаФР(ТипЧека, ПозицииЧека, СуммыОплат) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Check");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	ЗаписьXML.ЗаписатьАтрибут("CheckType", XMLСтрока(ТипЧека));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
	Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
		
		ТекущаяПозиция = ПозицииЧека[ИндексМассива];
		Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
			СтавкаНДС = ?(ПустаяСтрока(ТекущаяПозиция.СтавкаНДС), 0, ТекущаяПозиция.СтавкаНДС);
			ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
			ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
			ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
			ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
			ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
			ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
			ЗаписьXML.ЗаписатьАтрибут("Tax"       , XMLСтрока(СтавкаНДС));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("NonFiscalString");
			ЗаписьXML.ЗаписатьАтрибут("TextString", XMLСтрока(ТекущаяПозиция.Текст));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
			ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
			ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
	ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммыОплат.НаличнаяОплата));
	ЗаписьXML.ЗаписатьАтрибут("NonCashType1", XMLСтрока(СуммыОплат.БезналичнаяОплата1));
	ЗаписьXML.ЗаписатьАтрибут("NonCashType2", XMLСтрока(СуммыОплат.БезналичнаяОплата2));
	ЗаписьXML.ЗаписатьАтрибут("NonCashType3", XMLСтрока(СуммыОплат.БезналичнаяОплата3));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции 

// Получить структуру чека из XML.
//
// Возвращаемое значение:
// Структура 
//
Функция ЗагрузитьДанныеФискализацииИзXML(ДанныеXML) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	
	СтавкиНДС = Новый Соответствие();
	СтавкиНДС.Вставить("10", 10); 
	СтавкиНДС.Вставить("18", 18);
	СтавкиНДС.Вставить("20", 20);
	СтавкиНДС.Вставить("0", 0);
	СтавкиНДС.Вставить("10/110", 110);
	СтавкиНДС.Вставить("18/118", 118);
	СтавкиНДС.Вставить("20/120", 120);
	СтавкиНДС.Вставить("none", Неопределено);
	ФискальнаяСтрока = Неопределено;
	СуммаЧека = 0;
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "CheckPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ТипРасчета = ?(ЧтениеXML.ЗначениеАтрибута("PaymentType") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("PaymentType"), ЧтениеXML.ЗначениеАтрибута("OperationType"));
					ОбщиеПараметры.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					СистемаНалогообложения = ?(ЧтениеXML.ЗначениеАтрибута("TaxVariant") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("TaxVariant"), ЧтениеXML.ЗначениеАтрибута("TaxationSystem"));
					ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(СистемаНалогообложения));
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЗначениеXMLАтрибута(ЧтениеXML, "CashierVATIN", "CashierINN", Неопределено);
					
					ОбщиеПараметры.ОтправительEmail = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
					ОбщиеПараметры.ПокупательEmail = ЧтениеXML.ЗначениеАтрибута("CustomerEmail");
					ОбщиеПараметры.ПокупательНомер = ЧтениеXML.ЗначениеАтрибута("CustomerPhone");
					ОбщиеПараметры.ПризнакАгента = ЧтениеXML.ЗначениеАтрибута("AgentSign");
					ОбщиеПараметры.АдресРасчетов = ЗначениеXMLАтрибута(ЧтениеXML, "SaleAddress", "AddressSettle");
					ОбщиеПараметры.МестоРасчетов = ЗначениеXMLАтрибута(ЧтениеXML, "SaleLocation", "PlaceSettle");
					
					ОбщиеПараметры.ДополнительныйРеквизит = ЧтениеXML.ЗначениеАтрибута("AdditionalAttribute");
					Если ЧтениеXML.ЗначениеАтрибута("AgentSign") <> Неопределено Тогда  
						ПризнакАгента = Число(ЧтениеXML.ЗначениеАтрибута("AgentSign"));
						ОбщиеПараметры.ПризнакАгента = МенеджерОборудованияКлиентСервер.ПризнакАгентаПоКоду(ПризнакАгента);
					КонецЕсли;
					ОбщиеПараметры.Получатель    = ЧтениеXML.ЗначениеАтрибута("CustomerInfo");
					ОбщиеПараметры.ПолучательИНН = ЧтениеXML.ЗначениеАтрибута("CustomerINN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
					ОбщиеПараметры.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
					ОбщиеПараметры.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "VendorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "VendorName");
					ОбщиеПараметры.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "VendorPhone");
					ОбщиеПараметры.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "VendorINN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "CustomerDetail" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.СведенияОПокупателе.Покупатель = ЗначениеXMLАтрибута(ЧтениеXML, "Info");
					ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = ЗначениеXMLАтрибута(ЧтениеXML, "INN");
					ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес = ЗначениеXMLАтрибута(ЧтениеXML, "Address");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "AgentData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ДанныеАгента = ОбщиеПараметры.ДанныеАгента;
					ДанныеАгента.ПлатежныйАгент.Операция = ЗначениеXMLАтрибута(ЧтениеXML, "AgentOperation", "PayingAgentOperation");
					ДанныеАгента.ПлатежныйАгент.Телефон  = ЗначениеXMLАтрибута(ЧтениеXML, "AgentPhone", "PayingAgentPhone");
					ДанныеАгента.ОператорПеревода.Телефон      = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorPhone", "MoneyTransferOperatorPhone");
					ДанныеАгента.ОператорПеревода.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorName", "MoneyTransferOperatorName");
					ДанныеАгента.ОператорПеревода.Адрес        = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorAddress", "MoneyTransferOperatorAddress");
					ДанныеАгента.ОператорПеревода.ИНН          = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorINN", "MoneyTransferOperatorVATIN");
					ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PaymentProcessorPhone", "ReceivePaymentsOperatorPhone");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "UserAttribute" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "Name");
					ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение = ЗначениеXMLАтрибута(ЧтениеXML, "Value");
				КонецЕсли;
		
				Если ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						
						Если ЧтениеXML.Имя = "FiscalString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
							
							ФискальнаяСтрока.Наименование =  ЗначениеXMLАтрибута(ЧтениеXML, "Name");
							ФискальнаяСтрока.Количество   =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "Quantity", , 0));
							
							ФискальнаяСтрока.ЦенаСоСкидками =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "PriceWithDiscount", , 0));
							ФискальнаяСтрока.Сумма          =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "AmountWithDiscount", "SumWithDiscount", 0));
							СуммаСкидок = ЗначениеXMLАтрибута(ЧтениеXML, "DiscountAmount", "DiscountSum", 0);
							Если Не ПустаяСтрока(СуммаСкидок) Тогда
								ФискальнаяСтрока.СуммаСкидок  =  Число(СуммаСкидок);
							КонецЕсли;
							ФискальнаяСтрока.НомерСекции = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Department", , 0));
							ФискальнаяСтрока.ЕдиницаИзмерения = ЗначениеXMLАтрибута(ЧтениеXML, "MeasurementUnit");
								
							СтавкаНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATRate", "Tax");
							ФискальнаяСтрока.СтавкаНДС = СтавкиНДС.Получить(СтавкаНДС);
							
							СуммаНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATAmount", "TaxSum", 0);
							Если Не ПустаяСтрока(СуммаНДС) Тогда
								ФискальнаяСтрока.СуммаНДС = Число(СуммаНДС);
							КонецЕсли;
							
							ПризнакСпособаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignMethodCalculation", "PaymentMethod", 0));
							ФискальнаяСтрока.ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(ПризнакСпособаРасчета);
							
							ПризнакПредметаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignCalculationObject", "CalculationSubject", 0));
							ФискальнаяСтрока.ПризнакПредметаРасчета =  МенеджерОборудованияКлиентСервер.ПризнакПредметаРасчетаПоКоду(ПризнакПредметаРасчета);
							
							Если ЧтениеXML.ЗначениеАтрибута("SignSubjectCalculationAgent") <> Неопределено Или ЧтениеXML.ЗначениеАтрибута("CalculationAgent") <> Неопределено Тогда
								ПризнакАгента = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignSubjectCalculationAgent", "CalculationAgent", 0));
								ФискальнаяСтрока.ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.ПризнакАгентаПоКоду(ПризнакАгента);
							КонецЕсли;
								
							ФискальнаяСтрока.КодСтраныПроисхожденияТовара = ЗначениеXMLАтрибута(ЧтениеXML, "CountryOfOrigin");
							ФискальнаяСтрока.НомерТаможеннойДекларации = ЗначениеXMLАтрибута(ЧтениеXML, "CustomsDeclaration");
							ФискальнаяСтрока.ДополнительныйРеквизит = ЗначениеXMLАтрибута(ЧтениеXML, "AdditionalAttribute");
							
							СуммаАкциза = ЗначениеXMLАтрибута(ЧтениеXML, "ExciseAmount");
							Если НЕ ПустаяСтрока(СуммаАкциза) Тогда
								Если Число(СуммаАкциза) > 0 Тогда 
									ФискальнаяСтрока.СуммаАкциза = Число(СуммаАкциза);
								КонецЕсли;
							КонецЕсли;
							
							Если ЧтениеXML.ЗначениеАтрибута("MarkingCode") <> Неопределено Тогда
								ФискальнаяСтрока.КонтрольнаяМарка = ЧтениеXML.ЗначениеАтрибута("MarkingCode"); 
							КонецЕсли;
							
							ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "AgentData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ДанныеАгента = ФискальнаяСтрока.ДанныеАгента;
								ДанныеАгента.ПлатежныйАгент.Операция = ЗначениеXMLАтрибута(ЧтениеXML, "AgentOperation", "PayingAgentOperation");
								ДанныеАгента.ПлатежныйАгент.Телефон  = ЗначениеXMLАтрибута(ЧтениеXML, "AgentPhone", "PayingAgentPhone");
								ДанныеАгента.ОператорПеревода.Телефон      = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorPhone", "MoneyTransferOperatorPhone");
								ДанныеАгента.ОператорПеревода.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorName", "MoneyTransferOperatorName");
								ДанныеАгента.ОператорПеревода.Адрес        = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorAddress", "MoneyTransferOperatorAddress");
								ДанныеАгента.ОператорПеревода.ИНН          = ЗначениеXMLАтрибута(ЧтениеXML, "AcquirerOperatorINN", "MoneyTransferOperatorVATIN");
								ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PaymentProcessorPhone", "ReceivePaymentsOperatorPhone");
							КонецЕсли;
						КонецЕсли;
							
						Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
								ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
								ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "VendorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "VendorName");
								ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "VendorPhone");
								ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "VendorINN");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "GoodCodeData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ЗначениеXMLАтрибута(ЧтениеXML, "GTIN");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак = ЗначениеXMLАтрибута(ЧтениеXML, "Stamp");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ЗначениеXMLАтрибута(ЧтениеXML, "SerialNumber");
								ТипМаркировки = ЗначениеXMLАтрибута(ЧтениеXML, "StampType");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = МенеджерОборудованияКлиентСервер.ТипМаркировкиККТПоКоду(ТипМаркировки);
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара = ЗначениеXMLАтрибута(ЧтениеXML, "MarkingCode");
							КонецЕсли
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "TextString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							Текст = ЗначениеXMLАтрибута(ЧтениеXML, "Text");
							ТекстоваяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
							ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрока);
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "Barcode" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							ТипШтрихкодаЗнач = ЗначениеXMLАтрибута(ЧтениеXML, "Type");
							ШтрихКодЗнач = ЗначениеXMLАтрибута(ЧтениеXML, "Value");
							ШтрихКодBase64 = ЗначениеXMLАтрибута(ЧтениеXML, "ValueBase64");
							СтрокаШтрихКод = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкодаЗнач, ШтрихКодЗнач, ШтрихКодBase64); 
							ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаШтрихКод);
						КонецЕсли;
						
					КонецЦикла;  
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					СуммаПредоставление = Число(ЗначениеXMLАтрибута(ЧтениеXML, "CashProvision", "Barter", 0));
					
					ОплатаНеНаличными = СуммаЭлектронно + СуммаПостоплата + СуммаПредоплата + СуммаПредоставление;
					СуммаНаличные = ?(СуммаНаличные + ОплатаНеНаличными > СуммаЧека, СуммаЧека - ОплатаНеНаличными, СуммаНаличные); 
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоставление > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоставление);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		ИначеЕсли ЧтениеXML.Имя = "CheckCorrectionPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					ТипРасчета = ЧтениеXML.ЗначениеАтрибута("PaymentType");
					ОбщиеПараметры.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЧтениеXML.ЗначениеАтрибута("CashierVATIN");
					
					СистемаНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
					ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(СистемаНалогообложения));
					
					СуммаДокумента  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Sum"   , , 0));
					СуммаБезНДС = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAXNone", , 0));
					СуммаНДС0   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX0"   , , 0));
					
					СуммаНДС10  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX10"  , , 0));
					СуммаНДС18  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX18"  , , 0));
					СуммаНДС20  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX20"  , , 0));
					СуммаНДС110 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX110" , , 0));
					СуммаНДС118 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX118" , , 0));
					СуммаНДС120 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX120" , , 0));
					
					Если СуммаБезНДС > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция без НДС'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = СуммаБезНДС;
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = Неопределено;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС0 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 0%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = СуммаНДС0;
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 0;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС10 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 10%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС10 * 110 / 10, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 10;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС20 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 20%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС20 * 120 / 20, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 20;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС18 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 18%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС18 * 118 / 18, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 18;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
		
					Если СуммаНДС110 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 10/110'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС110 * 110 / 10, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 110;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС120 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 20/120'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС120 * 120 / 20, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 120;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС118 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 18/118'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС118 * 118 / 18, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 118;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					СуммаПозиций = 0;
					Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
						СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
					КонецЦикла;
					
					Если СуммаПозиций > СуммаДокумента Тогда
						Пока СуммаПозиций > СуммаДокумента Цикл
							Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
								Если ПозицияЧека.СтавкаНДС <> 0 И ПозицияЧека.СтавкаНДС <> Неопределено Тогда
									ПозицияЧека.Сумма = ПозицияЧека.Сумма - 0.01;
									ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
									СуммаПозиций = 0;
									Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
										СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					Иначе
						Пока СуммаДокумента > СуммаПозиций Цикл
							Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
								Если ПозицияЧека.СтавкаНДС <> 0 И ПозицияЧека.СтавкаНДС <> Неопределено Тогда
									ПозицияЧека.Сумма = ПозицияЧека.Сумма + 0.01;
									ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
									СуммаПозиций = 0;
									Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
										СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					СуммаПредоставление = Число(ЗначениеXMLАтрибута(ЧтениеXML, "CashProvision", "Barter", 0));
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоставление > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоставление);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ОбщиеПараметры;
	
КонецФункции

// Сформировать XML для запроса КМ.
// 
// Параметры:
//  ПараметрыОперации - Структура - Параметры операции 
//  РевизияИнтерфейса - Число - ревизия интерфейса
// 
// Возвращаемое значение:
//   Строка
//
Функция СформироватьXMLДляЗапросаКМ(ПараметрыОперации, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("RequestKM");
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	Если ПустаяСтрока(ИдентификаторЗапроса) Тогда
		ИдентификаторЗапроса =Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("GUID", XMLСтрока(ИдентификаторЗапроса));
	ЗаписьXML.ЗаписатьАтрибут("WaitForResult", ?(ПараметрыОперации.ОжидатьПолучениеОтветаОИСМ, "True", "False"));      
	ЗаписьXML.ЗаписатьАтрибут("NotSendToServer", ?(НЕ ПараметрыОперации.ОтправлятьНаСерверОИСМ, "True", "False"));      
	
	ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(ПараметрыОперации.КонтрольнаяМарка));
	ПланируемыйСтатусТовара = МенеджерОборудованияКлиентСервер.КодПланируемыйСтатусМаркируемогоТовара(ПараметрыОперации.ПланируемыйСтатусТовара);
	ЗаписьXML.ЗаписатьАтрибут("PlannedStatus", XMLСтрока(ПланируемыйСтатусТовара));
	
	ДробноеКоличествоУказано = Ложь;
	ДробноеКоличество = ПараметрыОперации.ДробноеКоличество;
	Если Не ПустаяСтрока(ДробноеКоличество.Числитель) И Не ПустаяСтрока(ДробноеКоличество.Знаменатель) Тогда
		Если Число(ДробноеКоличество.Числитель) > 0 И Число(ДробноеКоличество.Знаменатель) > 0 Тогда 
			ДробноеКоличествоУказано = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	Если РевизияИнтерфейса >= 4001 Тогда
		// Приказ ФНС России от 12.04.2023 N ЕД-7-20/239@ 
		Если ПараметрыОперации.Количество <> 1 Тогда
		ЗаписьXML.ЗаписатьАтрибут("Quantity", XMLСтрока(ПараметрыОперации.Количество)); // тег 1023
		КонецЕсли;
		Если ПланируемыйСтатусТовара = 2 Или ПланируемыйСтатусТовара = 4 Тогда    
			Если ДробноеКоличествоУказано Тогда 
				МераКоличестваПредметаРасчета = 0 ;
				ЗаписьXML.ЗаписатьАтрибут("MeasureOfQuantity", XMLСтрока(МераКоличестваПредметаРасчета));
				ЗаписьXML.ЗаписатьНачалоЭлемента("FractionalQuantity");
				ЗаписьXML.ЗаписатьАтрибут("Numerator", XMLСтрока(ДробноеКоличество.Числитель));
				ЗаписьXML.ЗаписатьАтрибут("Denominator", XMLСтрока(ДробноеКоличество.Знаменатель));
				ЗаписьXML.ЗаписатьКонецЭлемента();  
			КонецЕсли	
		КонецЕсли; 
		Если Не ПустаяСтрока(ПараметрыОперации.КодЕдиницыИзмерения) Тогда
			МераКоличестваПредметаРасчета = МенеджерОборудованияКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(ПараметрыОперации.КодЕдиницыИзмерения)
		Иначе
			МераКоличестваПредметаРасчета = ПараметрыОперации.МераКоличестваПредметаРасчета; 
		КонецЕсли;
		Если Не ПустаяСтрока(МераКоличестваПредметаРасчета) И НЕ (МераКоличестваПредметаРасчета = 0) Тогда  // тег 2108
			МераКоличестваПредметаРасчета = МенеджерОборудованияКлиентСервер.КодМерыКоличестваПредметаРасчетаККТ(МераКоличестваПредметаРасчета);
			ЗаписьXML.ЗаписатьАтрибут("MeasureOfQuantity", XMLСтрока(МераКоличестваПредметаРасчета));
		КонецЕсли;
	Иначе
		// Реквизиты "количество предмета расчета" (тег 1023) и "мера количества предмета расчета" (тег 2108) включаются в состав запроса о коде маркировки
		// в случае, если реквизит "планируемый статус товара" (тег 2003) принимает значения "2" или "4".
		Если ПланируемыйСтатусТовара = 2 Или ПланируемыйСтатусТовара = 4 Тогда    
			ЗаписьXML.ЗаписатьАтрибут("Quantity", XMLСтрока(ПараметрыОперации.Количество)); // тег 1023
			Если ДробноеКоличествоУказано Тогда 
				МераКоличестваПредметаРасчета = 0 ;
				ЗаписьXML.ЗаписатьАтрибут("MeasureOfQuantity", XMLСтрока(МераКоличестваПредметаРасчета));
				ЗаписьXML.ЗаписатьНачалоЭлемента("FractionalQuantity");
				ЗаписьXML.ЗаписатьАтрибут("Numerator", XMLСтрока(ДробноеКоличество.Числитель));
				ЗаписьXML.ЗаписатьАтрибут("Denominator", XMLСтрока(ДробноеКоличество.Знаменатель));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе	
				Если Не ПустаяСтрока(ПараметрыОперации.КодЕдиницыИзмерения) Тогда
					МераКоличестваПредметаРасчета = МенеджерОборудованияКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(ПараметрыОперации.КодЕдиницыИзмерения)
				Иначе
					МераКоличестваПредметаРасчета = ПараметрыОперации.МераКоличестваПредметаРасчета; 
			КонецЕсли;
				Если Не ПустаяСтрока(МераКоличестваПредметаРасчета) Тогда  // тег 2108
					МераКоличестваПредметаРасчета = МенеджерОборудованияКлиентСервер.КодМерыКоличестваПредметаРасчетаККТ(МераКоличестваПредметаРасчета);
					ЗаписьXML.ЗаписатьАтрибут("MeasureOfQuantity", XMLСтрока(МераКоличестваПредметаРасчета));
				КонецЕсли;    
			КонецЕсли	
		КонецЕсли;
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции  

// Получить результаты запроса КМ из XML пакета.
// 
// Параметры:
//  ДанныеXML - Строка - XML.  
// 
// Возвращаемое значение:
//  Структура - Получить результаты запроса КМИз XMLПакета:
//   * КодМаркировкиПроверен - Булево -
//   * РезультатПроверки - Булево -
Функция ПолучитьРезультатыЗапросаКМИзXMLПакета(ДанныеXML) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("КодМаркировкиПроверен", Ложь);
	Параметры.Вставить("РезультатПроверки", Ложь);
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "RequestKMResult" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Параметры.КодМаркировкиПроверен = ВРег(ЧтениеXML.ЗначениеАтрибута("Checking")) = "TRUE";
			Параметры.РезультатПроверки = ВРег(ЧтениеXML.ЗначениеАтрибута("CheckingResult")) = "TRUE";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить результаты запроса ОИСМ КМ из XML пакета.
// 
// Параметры:
//  ДанныеXML - Строка - XML.  
// 
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьРезультатыОИСМКМИзXMLПакета(ДанныеXML) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ИдентификаторЗапроса");
	Параметры.Вставить("СтатусРезультата");
	Параметры.Вставить("РезультатПроверкиОИСМ", Ложь);
	Параметры.Вставить("КодРезультатаПроверкиОИСМ", 0);
	Параметры.Вставить("РезультатПроверкиОИСМПредставление", "00000000");

	Параметры.Вставить("РезультатПроверкиСведенийОТоваре");
	Параметры.Вставить("РезультатПроверкиСведенийОТовареПФ");
	Параметры.Вставить("КодОбработкиЗапроса");
	Параметры.Вставить("СтатусОбработкиЗапроса");

	Параметры.Вставить("СтатусТовара", Неопределено);
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "ProcessingKMResult" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Параметры.РезультатПроверкиОИСМ = ВРег(ЧтениеXML.ЗначениеАтрибута("Result")) = "TRUE";
			Параметры.КодРезультатаПроверкиОИСМ = ЧтениеXML.ЗначениеАтрибута("ResultCode");
			Если ЧтениеXML.ЗначениеАтрибута("ResultCode") <> Неопределено Тогда
				Параметры.КодРезультатаПроверкиОИСМ = Число(ЧтениеXML.ЗначениеАтрибута("ResultCode"));
				Параметры.РезультатПроверкиОИСМПредставление = МенеджерОборудованияКлиентСервер.ПреобразоватьЧислоВБинарнуюСтроку(Параметры.КодРезультатаПроверкиОИСМ, 8);
			КонецЕсли;
			Если ЧтениеXML.ЗначениеАтрибута("StatusInfo") <> Неопределено Тогда
				СтатусТовара = Число(ЧтениеXML.ЗначениеАтрибута("StatusInfo"));
				Параметры.СтатусТовара = МенеджерОборудованияКлиентСервер.ОтветОИСМОСтатусеТовараПоКоду(СтатусТовара);
			КонецЕсли;
			Параметры.ИдентификаторЗапроса = ЧтениеXML.ЗначениеАтрибута("GUID");
			КодОбработкиЗапроса = ЧтениеXML.ЗначениеАтрибута("HandleCode");
			Если Не ПустаяСтрока(КодОбработкиЗапроса) Тогда
				Параметры.КодОбработкиЗапроса = Число(КодОбработкиЗапроса);
				Параметры.СтатусОбработкиЗапроса = СтатусОбработкиЗапросаКМПоКоду(Параметры.КодОбработкиЗапроса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.РезультатПроверкиСведенийОТоваре = РезультатПроверкиСведенийОТоваре(Параметры.РезультатПроверкиОИСМПредставление);
	Параметры.РезультатПроверкиСведенийОТовареПФ = РезультатПроверкиСведенийОТовареПФ(Параметры.РезультатПроверкиОИСМПредставление);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьДанныеКоррекции(ЗаписьXML, ДанныеКоррекции)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CorrectionData");
	ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
	ЗаписьXML.ЗаписатьАтрибут("Type",  XMLСтрока(ТипКоррекции));
	Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Date",  XMLСтрока(НачалоДня(ДанныеКоррекции.ДатаКоррекции)));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Number",  XMLСтрока(ДанныеКоррекции.НомерПредписания));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Description",  XMLСтрока(ДанныеКоррекции.ОписаниеКоррекции));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаполнитьОтраслевойРеквизитИзделияИзНатуральногоМеха(Позиция)
	
	ТипыТоваров = ОтраслевойРеквизитЗаполняетсяДляТиповТоваров();
	ОтраслевойРеквизит = Позиция.ОтраслевойРеквизит;
	Если ТипыТоваров.ИзделияИзНатуральногоМеха Тогда
		// Передача сведений о выбытии меховых изделий через ККТ.
		ОтраслевойРеквизит.ИдентификаторФОИВ = "030"; // 1262 
		ОтраслевойРеквизит.ДатаДокументаОснования = Дата("20160811"); // 1263
		ОтраслевойРеквизит.НомерДокументаОснования = "787"; // 1264
		ОтраслевойРеквизит.ЗначениеРеквизита = "crpt=mrk"; // 1265
	КонецЕсли; 
	
КонецПроцедуры    

Процедура ЗаполнитьОтраслевойРеквизитОбъемноСортовойУчет(Позиция)
	
	ТипыТоваров = ОтраслевойРеквизитЗаполняетсяДляТиповТоваров();
	ОтраслевойРеквизит = Позиция.ОтраслевойРеквизит;
	// Передача сведений об объемно сортовой товара при оптовой продаже через ККТ.
	Если Позиция.ОбъемноСортовойУчет И ТипыТоваров.ОбъемноСортовойУчет Тогда
		ОтраслевойРеквизит.ИдентификаторФОИВ = "030"; // 1262 
		ОтраслевойРеквизит.ДатаДокументаОснования = Дата("20190403"); // 1263
		ОтраслевойРеквизит.НомерДокументаОснования = "620"; // 1264
		ЗначениеРеквизита = "crpt=mrk";  
		Если Позиция.ДвижениеЧерезУПД Тогда
			ЗначениеРеквизита = ЗначениеРеквизита + "&mode=osu"; 
		КонецЕсли;
		Если Не ПустаяСтрока(Позиция.КоличествоВесовогоТовара) Тогда
			ЗначениеРеквизита = ЗначениеРеквизита + "&q=" + Позиция.КоличествоВесовогоТовара;      
		КонецЕсли;
		ОтраслевойРеквизит.ЗначениеРеквизита = ЗначениеРеквизита;  // 1265   
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ЗаполнитьОтраслевойРеквизитМолочнаяПродукцияСНечитаемымиКМ(Позиция)
	
	ТипыТоваров = ОтраслевойРеквизитЗаполняетсяДляТиповТоваров();
	ОтраслевойРеквизит = Позиция.ОтраслевойРеквизит;
	Если ТипыТоваров.МолочнаяПродукцияСНечитаемымиКМ Тогда   
		ДатаПроизводства = ?(Позиция.ДатаПроизводства <> Неопределено, Формат(Позиция.ДатаПроизводства, "ДФ=""ггММдд"""), "");
		ОтраслевойРеквизит.ИдентификаторФОИВ = "030"; // 1262 
		ОтраслевойРеквизит.ДатаДокументаОснования = Дата("20201215"); // 1263
		ОтраслевойРеквизит.НомерДокументаОснования = "2099"; // 1264
		ОтраслевойРеквизит.ЗначениеРеквизита = "pd=" + ДатаПроизводства + "&km=tech"; // 1265 - ГГММДД – дата производства товара
	КонецЕсли; 
	
КонецПроцедуры 

// Записывает данные агента в XML файл
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  ДанныеАгента - см. МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента
//  РевизияИнтерфейса - Число
//
Процедура ЗаписатьДанныеАгента(ЗаписьXML, ДанныеАгента, РевизияИнтерфейса = 0)
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("AgentData");
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда // Операция платежного агента
			ЗаписьXML.ЗаписатьАтрибут("AgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда // Телефон платежного агента
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ПлатежныйАгент.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("AgentPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда // Телефон оператора по приему платежей
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("PaymentProcessorPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда // Телефон оператора перевода
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ОператорПеревода.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда // Наименование оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда // Адрес оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда // ИНН оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorINN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("AgentData");
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PayingAgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ПлатежныйАгент.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("PayingAgentPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("ReceivePaymentsOperatorPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеАгента.ОператорПеревода.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorVATIN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные поставщика в XML файл
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  ДанныеПоставщика - см. МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика
//  РевизияИнтерфейса - Число
//
Процедура ЗаписатьДанныеПоставщика(ЗаписьXML, ДанныеПоставщика, РевизияИнтерфейса = 0)
	
	Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("VendorData");
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда // Телефон поставщика
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеПоставщика.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("VendorPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда // Наименование поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда // ИНН поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorINN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("PurveyorData");
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда
			Телефон = МенеджерОборудованияКлиентСервер.АбонентскийНомерФорматФФД(ДанныеПоставщика.Телефон);
			ЗаписьXML.ЗаписатьАтрибут("PurveyorPhone", Телефон);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorVATIN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, Позиция, РевизияИнтерфейса)
	
	ДанныеКодаТоварнойНоменклатуры = Позиция.ДанныеКодаТоварнойНоменклатуры;
	ДанныеКодаТовара = Неопределено;
	
	// Код товара заполняемся для "товара" для ФФД 1.1
	Если РевизияИнтерфейса < 3004 
		И Позиция.ПризнакПредметаРасчета <> Перечисления.ПризнакиПредметаРасчета.Товар
		И Позиция.ПризнакПредметаРасчета <> Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар Тогда
		Возврат;
	КонецЕсли;
	
	// Требования к разработке драйверов подключаемого оборудования, версия 3.2 и выше.
	Если РевизияИнтерфейса > 3001 Тогда 
		
		Если НЕ ПустаяСтрока(Позиция.КодВидаНоменклатурнойКлассификации) Тогда
			ДанныеКодаТовара = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.КодВидаНоменклатурнойКлассификации);
			РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
		ИначеЕсли НЕ ПустаяСтрока(Позиция.ШтрихкодBase64) Тогда
			ДанныеКодаТовара = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.ШтрихкодBase64, Истина);
			РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
		Иначе
			ДанныеКодаТовара = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.Штрихкод);
			РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
		КонецЕсли;
		
		ТипыИдентификаторов = КодТовараЗаполняетсяДляТиповИдентификаторов();
		
		Если РевизияИнтерфейса > 3003 Тогда // 3.4 и выше
			// ФФД 1.2
			Если (НЕ ПустаяСтрока(РеквизитКодаТовара) И НЕ ПустаяСтрока(ДанныеКодаТовара.ШтрихкодBase64)) Тогда // Запись тега 1163
				Если ПустаяСтрока(Позиция.КонтрольнаяМарка) И ТипыИдентификаторов.Найти(ДанныеКодаТовара.ТипИдентификатораТовара)<> Неопределено Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("GoodCodeData");
				Если ДанныеКодаТовара.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха Тогда
					ЗаписьXML.ЗаписатьАтрибут(ДанныеКодаТовара.НаименованиеРеквизита, XMLСтрока(МенеджерОборудованияВызовСервера.Base64ВШтрихкод(ДанныеКодаТовара.ШтрихкодBase64)));
					// Заполнение отраслевых реквизитов в соответствии с требованиями ЦРПТ по ТипИдентификатораТовара
					ЗаполнитьОтраслевойРеквизитИзделияИзНатуральногоМеха(Позиция);
				ИначеЕсли ДанныеКодаТовара.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараНеРаспознан Тогда
					ЗаписьXML.ЗаписатьАтрибут(ДанныеКодаТовара.НаименованиеРеквизита, XMLСтрока(ДанныеКодаТовара.ШтрихкодBase64));
				Иначе
					ШтрихкодBase64 = ШтрихкодДляТега1163Base64(ДанныеКодаТовара);
					ЗаписьXML.ЗаписатьАтрибут(ДанныеКодаТовара.НаименованиеРеквизита, XMLСтрока(ШтрихкодBase64));
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли; 
			КонецЕсли; 
			Если ДанныеКодаТовара.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1 И ДанныеКодаТовара.ТехническийКод Тогда
				ЗаполнитьОтраслевойРеквизитМолочнаяПродукцияСНечитаемымиКМ(Позиция);
			КонецЕсли;
		Иначе
			// ФФД 1.1
			ТипыТоваров = ОтраслевойРеквизитЗаполняетсяДляТиповТоваров(); 
			ФормироватьРеквизитКодаТовара = Ложь;
			НачалоРеквизитКодаТовара = Лев(РеквизитКодаТовара, 3); 
			Если НЕ ПустаяСтрока(Позиция.КодВидаНоменклатурнойКлассификации) Тогда // СИЗ
				ФормироватьРеквизитКодаТовара = Истина
			ИначеЕсли НачалоРеквизитКодаТовара = "RQg" Тогда // EAN8 - Если первые 2 байта значения кода товара имеют значения "45h08h".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеEAN8) <> Неопределено;
				ФормироватьРеквизитКодаТовара = ФормироватьРеквизитКодаТовара И Позиция.ОбъемноСортовойУчет И ТипыТоваров.ОбъемноСортовойУчет;
			ИначеЕсли НачалоРеквизитКодаТовара = "RQ0" Тогда // EAN13 - Если первые 2 байта значения кода товара имеют значения "45h0Dh".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеEAN8) <> Неопределено;
				// Формируем 1162 только товаров объемно-сортовой учета, если заполняем отраслевой реквизит. 
				ФормироватьРеквизитКодаТовара = ФормироватьРеквизитКодаТовара И Позиция.ОбъемноСортовойУчет И ТипыТоваров.ОбъемноСортовойУчет;
			ИначеЕсли НачалоРеквизитКодаТовара = "SQ4" Тогда // ITF-14 - Если первые 2 байта значения кода товара имеют значения "49h0Eh".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеITF14) <> Неопределено;
			ИначеЕсли НачалоРеквизитКодаТовара = "RE0" Тогда // GS1 Data Matrix или Data Matrix  - Если первые 2 байта значения кода товара имеют значения "44h4Dh".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1) <> Неопределено;
			ИначеЕсли НачалоРеквизитКодаТовара = "UkZ" Тогда // Меховые изделия - Если первые 2 байта значения кода товара имеют значения "52h46h".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха) <> Неопределено;
				// Формируем 1162 для изделия из натурального меха, если заполняем отраслевой реквизит. 
				ФормироватьРеквизитКодаТовара = ФормироватьРеквизитКодаТовара И ТипыТоваров.ИзделияИзНатуральногоМеха;
			ИначеЕсли НачалоРеквизитКодаТовара = "xRR" Тогда // ЕГАИС 2.0 - Если первые 2 байта значения кода товара имеют значения "C5h14h".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2) <> Неопределено;
			ИначеЕсли НачалоРеквизитКодаТовара = "xR4" Тогда // ЕГАИС 3.0 - Если первые 2 байта значения кода товара имеют значения "C5h1Eh".
				ФормироватьРеквизитКодаТовара = ТипыИдентификаторов.Найти(Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3) <> Неопределено;
			КонецЕсли;
		
			Если Не ФормироватьРеквизитКодаТовара Тогда
				Возврат;
			КонецЕсли;
		
			// Реквизит кода товара (1162) для стандарта 3.2 и выше в ККТ передается в готовом виде.
			Если НЕ ПустаяСтрока(РеквизитКодаТовара) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("GoodCodeData");
				ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(РеквизитКодаТовара));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЕсли
	Иначе
		// Требования к разработке драйверов подключаемого оборудования, версия 3.1 и ниже.
		Если ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) Тогда // Необходимо всегда указывать тип маркировки. 
			Возврат;
		КонецЕсли;
		Если ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак)
		И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы)
		И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер)Тогда
			Возврат;
	КонецЕсли;
	ЗаписьXML.ЗаписатьНачалоЭлемента("GoodCodeData");
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) Тогда // Тип маркировки.
		ТипМаркировки = МенеджерОборудованияКлиентСервер.КодТипаМаркировкиККТ(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки);
		ЗаписьXML.ЗаписатьАтрибут("StampType", XMLСтрока(ТипМаркировки));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак) Тогда // Контрольный идентификационный знак (КиЗ).
		ЗаписьXML.ЗаписатьАтрибут("Stamp" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы) Тогда // Глобальный идентификатор торговой единицы (GTIN).
		ЗаписьXML.ЗаписатьАтрибут("GTIN" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер) Тогда // Серийный номер.
		ЗаписьXML.ЗаписатьАтрибут("SerialNumber" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер));
	КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара) Тогда // Реквизит кода товара.
			ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ДополнительныйРеквизитПользователя);
	
	Если ПустаяСтрока(ДополнительныйРеквизитПользователя.Наименование) 
		И ПустаяСтрока(ДополнительныйРеквизитПользователя.Значение) Тогда
			Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UserAttribute");
	Если Не ПустаяСтрока(ДополнительныйРеквизитПользователя.Наименование) Тогда // Наименование дополнительного реквизита пользователя.
		ЗаписьXML.ЗаписатьАтрибут("Name" , XMLСтрока(ДополнительныйРеквизитПользователя.Наименование));
	КонецЕсли;
	Если Не ПустаяСтрока(ДополнительныйРеквизитПользователя.Значение) Тогда // Значение дополнительного реквизита пользователя.
		ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ДополнительныйРеквизитПользователя.Значение));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьОперационныйРеквизит(ЗаписьXML, ОперационныйРеквизит)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OperationalAttribute");
	
	Если Не ПустаяСтрока(ОперационныйРеквизит.ДатаВремяОперации) Тогда
		ЗаписьXML.ЗаписатьАтрибут("DateTime",  XMLСтрока(ОперационныйРеквизит.ДатаВремяОперации));
	КонецЕсли;
	Если Не ПустаяСтрока(ОперационныйРеквизит.ИдентификаторОперации) Тогда
		ЗаписьXML.ЗаписатьАтрибут("OperationID",  XMLСтрока(ОперационныйРеквизит.ИдентификаторОперации));
	КонецЕсли;
	Если Не ПустаяСтрока(ОперационныйРеквизит.ДанныеОперации) Тогда
		ЗаписьXML.ЗаписатьАтрибут("OperationData",  XMLСтрока(ОперационныйРеквизит.ДанныеОперации));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьОтраслевойРеквизит(ЗаписьXML, ОтраслевойРеквизит)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("IndustryAttribute");
	
	Если Не ПустаяСтрока(ОтраслевойРеквизит.ИдентификаторФОИВ) Тогда
		ЗаписьXML.ЗаписатьАтрибут("IdentifierFOIV",  XMLСтрока(ОтраслевойРеквизит.ИдентификаторФОИВ));
	КонецЕсли;
	Если Не ПустаяСтрока(ОтраслевойРеквизит.ДатаДокументаОснования) Тогда
		// АПК: 1367-выкл, АПК: 335-выкл особенность локального законодательства
		ДатаДокументаОснования = Формат(ОтраслевойРеквизит.ДатаДокументаОснования, "ДФ=""дд.ММ.гггг""");
		// АПК: 1367-вкл, АПК: 335-вкл
		ЗаписьXML.ЗаписатьАтрибут("DocumentDate",  ДатаДокументаОснования);
	КонецЕсли;
	Если Не ПустаяСтрока(ОтраслевойРеквизит.НомерДокументаОснования) Тогда
		ЗаписьXML.ЗаписатьАтрибут("DocumentNumber",  XMLСтрока(ОтраслевойРеквизит.НомерДокументаОснования));
	КонецЕсли;
	Если Не ПустаяСтрока(ОтраслевойРеквизит.ЗначениеРеквизита) Тогда
		ЗаписьXML.ЗаписатьАтрибут("AttributeValue",  XMLСтрока(ОтраслевойРеквизит.ЗначениеРеквизита));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьСведенияОПокупателе(ЗаписьXML, ОбщиеПараметры);
	
	СведенияОПокупателе = ОбщиеПараметры.СведенияОПокупателе; 
	
	Покупатель = СведенияОПокупателе.Покупатель;
	Если ПустаяСтрока(Покупатель) Тогда
		Покупатель = ОбщиеПараметры.Получатель;
	КонецЕсли;
	
	ПокупательИНН = СведенияОПокупателе.ПокупательИНН;
	Если ПустаяСтрока(ПокупательИНН) Тогда
		ПокупательИНН = ОбщиеПараметры.ПолучательИНН;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerDetail");
	
	Если Не ПустаяСтрока(Покупатель) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Info",  XMLСтрока(Покупатель));
	КонецЕсли;
	Если Не ПустаяСтрока(ПокупательИНН) Тогда
		ЗаписьXML.ЗаписатьАтрибут("INN",  XMLСтрока(ПокупательИНН));
	КонецЕсли;
	Если Не ПустаяСтрока(СведенияОПокупателе.ПокупательАдрес) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Address",  XMLСтрока(СведенияОПокупателе.ПокупательАдрес));
	КонецЕсли;
	
	Если Не ПустаяСтрока(СведенияОПокупателе.Гражданство) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Citizenship",  XMLСтрока(СведенияОПокупателе.Гражданство));
	КонецЕсли;
		
	Если Не ПустаяСтрока(СведенияОПокупателе.ВидДокумента) Тогда
		ВидДокумента = МенеджерОборудованияКлиентСервер.КодВидДокументаУдостоверяющегоЛичность(СведенияОПокупателе.ВидДокумента);
		ЗаписьXML.ЗаписатьАтрибут("DocumentTypeCode",  XMLСтрока(ВидДокумента));
	КонецЕсли;
		
	Если Не ПустаяСтрока(СведенияОПокупателе.ДанныеДокумента) Тогда
		ЗаписьXML.ЗаписатьАтрибут("DocumentData",  XMLСтрока(СведенияОПокупателе.ДанныеДокумента));
	КонецЕсли;
		
	Если Не ПустаяСтрока(СведенияОПокупателе.ДатаРождения) Тогда
		ДатаРождения = Формат(СведенияОПокупателе.ДатаРождения, "ДФ=""дд.ММ.гггг""");
		ЗаписьXML.ЗаписатьАтрибут("DateOfBirth",  ДатаРождения);
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЗначениеXMLАтрибута(ЧтениеXML, ИмяАтрибута, ДопИмяАтрибута = Неопределено, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	Если ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута) <> Неопределено Тогда  
		Результат = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	ИначеЕсли НЕ ПустаяСтрока(ДопИмяАтрибута) И ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута) <> Неопределено Тогда
		Результат = ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция ШтрихкодДляТега1163Base64(ДанныеКодаТовара)
	
	Если ДанныеКодаТовара.НаименованиеРеквизита = "GS1.0" 
		Или ДанныеКодаТовара.НаименованиеРеквизита = "GS1.M" Тогда
		
		Штрихкод = "";
		ДанныеШтрихкода = ДанныеКодаТовара.ДанныеШтрихкода;
		
		ЗначениеПоля = ДанныеШтрихкода.Получить("01");
		Если ЗначениеПоля <> Неопределено Тогда
			Штрихкод = Штрихкод + "01" + ЗначениеПоля.Значение;
		КонецЕсли;
		ЗначениеПоля = ДанныеШтрихкода.Получить("21");
		Если ЗначениеПоля <> Неопределено Тогда
			Штрихкод = Штрихкод + "21" + ЗначениеПоля.Значение;
		КонецЕсли;
		Результат = МенеджерОборудованияВызовСервера.ШтрихкодВBase64(Штрихкод);
		
	Иначе
		Результат = ДанныеКодаТовара.ШтрихкодBase64;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Получить таблицу меток RFID.
//
// Возвращаемое значение
//  Массив
// 
Функция МеткиRFID(ДанныеМеток) Экспорт
	
	Результат = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ДанныеМеток);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "Tag" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				// Получение банков памяти считанной метки.
				TID = ЧтениеXML.ЗначениеАтрибута("TID");
				EPC = ЧтениеXML.ЗначениеАтрибута("EPC");
				USER = ЧтениеXML.ЗначениеАтрибута("USER");
				// Декодирование банка EPC по формату SGTIN.  
				ПозицияДанных = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(EPC);
				ПозицияДанных.Вставить("TID" , TID);  // Добавляем в структура значения TID чипа метки.
				ПозицияДанных.Вставить("USER", USER); // Добавляем в структура значения банка USER.
				ПозицияДанных.Вставить("UserMemory", МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВСтроку(USER));
				
				Результат.Добавить(ПозицияДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КодаВидаНоменклатурнойКлассификации

// Возвращает классификатор кода вида номенклатурной классификации
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция КодыВидаНоменклатурнойКлассификации() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НаименованиеВидаНоменклатурнойКлассификации",,"НаименованиеВидаНоменклатурнойКлассификации");
	ТаблицаЗначений.Колонки.Добавить("КодВидаНоменклатурнойКлассификации",,"КодВидаНоменклатурнойКлассификации");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = ПолучитьОбщийМакет("КодВидаНоменклатурнойКлассификации");
	Данные = Макет.ТекущаяОбласть.Текст;
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "КодВидаНоменклатурнойКлассификации" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "ВидНоменклатурнойКлассификации" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
					ВидНоменклатурнойКлассификации = ТаблицаЗначений.Добавить();
					ВидНоменклатурнойКлассификации.НаименованиеВидаНоменклатурнойКлассификации = ЧтениеXML.ЗначениеАтрибута("Имя");
					ВидНоменклатурнойКлассификации.КодВидаНоменклатурнойКлассификации = ЧтениеXML.ЗначениеАтрибута("КодВида");
				КонецЕсли;
			КонецЦикла;           
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсныйПроцедурыИФункции

Процедура ПодготовитьЭлементУправления(ЭлементУправления) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	#Если МобильноеПриложениеСервер Тогда
		ЭлементУправления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементУправления.ШрифтЗаголовка = ШрифтыСтиля.МелкийШрифтТекста;
	#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодBase64 = Base64Строка(ДвоичныеДанныеСтроки);
	ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ПС, "");
	ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ВК, "");
	
	Возврат ШтрихкодBase64;
	
КонецФункции

#КонецОбласти

#Область Служебные

// Получить обработки запроса КМ по коду.
//
Функция СтатусОбработкиЗапросаКМПоКоду(КодОбработкиЗапроса) 
	
	СтатусОбработки = Новый Соответствие(); 
	
	СтатусОбработки.Вставить(0, ПредопределенноеЗначение("Перечисление.СтатусОбработкиЗапросаКМ.КорректныйФормат"));
	СтатусОбработки.Вставить(1, ПредопределенноеЗначение("Перечисление.СтатусОбработкиЗапросаКМ.НекорректныйФормат"));
	СтатусОбработки.Вставить(2, ПредопределенноеЗначение("Перечисление.СтатусОбработкиЗапросаКМ.НекорректныйФорматКМ"));
	
	Возврат СтатусОбработки.Получить(Число(КодОбработкиЗапроса));
	
КонецФункции

// Получить результат проверки сведений о товаре.
//
Функция РезультатПроверкиСведенийОТоваре(РезультатПроверки)
	
	РезультатыПроверки = Новый Соответствие();
	
	РезультатыПроверки.Вставить("00000000", НСтр("ru='Проверка КП КМ не выполнена, статус товара ОИСМ не проверен'"));
	РезультатыПроверки.Вставить("00000001", НСтр("ru='Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен'"));
	РезультатыПроверки.Вставить("00000011", НСтр("ru='Проверка КП КМ выполнена с положительным результатом, статус товара ОИСМ не проверен'"));
	РезультатыПроверки.Вставить("00010000", НСтр("ru='Проверка КП КМ не выполнена, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	РезультатыПроверки.Вставить("00010001", НСтр("ru='Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	РезультатыПроверки.Вставить("00010011", НСтр("ru='Проверка КП КМ выполнена в ФН с положительным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	РезультатыПроверки.Вставить("00000101", НСтр("ru='Проверка КП КМ выполнена с отрицательным результатом, статус товара у ОИСМ некорректен'"));
	РезультатыПроверки.Вставить("00000111", НСтр("ru='Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ некорректен'"));
	РезультатыПроверки.Вставить("00001111", НСтр("ru='Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ корректен'"));
	
	Возврат РезультатыПроверки.Получить(РезультатПроверки);
	
КонецФункции

// Получить результат проверки сведений о товаре.
//
Функция РезультатПроверкиСведенийОТовареПФ(РезультатПроверки)
	
	РезультатыПроверки = Новый Соответствие();
	
	РезультатыПроверки.Вставить("00000000", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000001", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000011", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00010000", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00010001", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00010011", "[М]");  // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000101", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00000111", "[М-]"); // Не локализовывать, утверждено ФФД.
	РезультатыПроверки.Вставить("00001111", "[М+]"); // Не локализовывать, утверждено ФФД.
	
	Возврат РезультатыПроверки.Получить(РезультатПроверки);
	
КонецФункции

#КонецОбласти
