
#Область ПрограммныйИнтерфейс     


Процедура ОтрисоватьФормуПоОписанию(Форма, Описание, ТолькоДанные = Ложь) Экспорт  
	
	Если Не ТолькоДанные Тогда
	
		ЗаполнитьЗначенияСвойств(Форма.Параметры,Описание);
		
		Для Каждого Реквизит Из Описание.РеквизитыФормы Цикл			
			ОписаниеРеквизита = ПолучитьСтруктуруОписанияРеквизитаФормы();
			ОписаниеРеквизита.ИмяРеквизита = Реквизит.ИмяРеквизита;  
			ОписаниеРеквизита.Заголовок = Реквизит.Заголовок;
			ОписаниеРеквизита.ТипРеквизита = Новый ОписаниеТипов(Реквизит.ТипРеквизита);
			ОписаниеРеквизита.Путь = Реквизит.Путь; 
			ДобавитьРеквизитНаФорму(Форма, ОписаниеРеквизита); 	
		КонецЦикла;
		
		Для Каждого Элемент Из Описание.ЭлементыФормы Цикл			
			ОписаниеЭлемента = ПолучитьСтруктуруОписанияЭлементаФормы();
			ОписаниеЭлемента.ИмяЭлемента = Элемент.ИмяЭлемента;
			ОписаниеЭлемента.Заголовок = Элемент.Заголовок;
			ОписаниеЭлемента.ТипЭлементаФормы = Тип(Элемент.ТипЭлементаФормы); 
			
			Если ЗначениеЗаполнено(Элемент.ВидЭлементаФормы) Тогда
				ОписаниеЭлемента.ВидЭлементаФормы = ВидПоляФормы[Элемент.ВидЭлементаФормы]; 
			КонецЕсли;     
			
			Если ЗначениеЗаполнено(Элемент.ЭлементРазмещения) Тогда
				ОписаниеЭлемента.ЭлементРазмещения = Форма.Элементы[Элемент.ЭлементРазмещения]; 
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Элемент.ПутьКДанным) Тогда
				ОписаниеЭлемента.ПутьКДанным = Элемент.ПутьКДанным; 
			КонецЕсли;	
			   	
			ДобавитьЭлементНаФорму(Форма,ОписаниеЭлемента);	 
			
			Для Каждого КлючЗначение Из Элемент.СвойстваЭлемента Цикл
				Если КлючЗначение.Ключ = "ВидГруппыФормы" Тогда 
					Форма.Элементы[Элемент.ИмяЭлемента].Вид = ВидГруппыФормы[КлючЗначение.Значение];	
				ИначеЕсли КлючЗначение.Ключ = "Группировка" Тогда
					Форма.Элементы[Элемент.ИмяЭлемента].Группировка = ГруппировкаПодчиненныхЭлементовФормы[КлючЗначение.Значение];	
				ИначеЕсли КлючЗначение.Ключ = "ВидПереключателя" Тогда
					//Форма.Элементы[Элемент.ИмяЭлемента].ВидПереключателя = ВидПереключателя[КлючЗначение.Значение];     
				ИначеЕсли КлючЗначение.Ключ = "СписокВыбораЭлементаФормы" Тогда
					Форма.Элементы[Элемент.ИмяЭлемента].СписокВыбора.Очистить();
					Для Каждого СтрокаСписка из КлючЗначение.Значение Цикл
						Форма.Элементы[Элемент.ИмяЭлемента].СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
					КонецЦикла;
				Иначе			
					Форма.Элементы[Элемент.ИмяЭлемента][КлючЗначение.Ключ] = КлючЗначение.Значение;
				КонецЕсли;
			КонецЦикла;    
			
			Для Каждого КлючЗначение Из Элемент.ОбработчикиСобытий Цикл
				Форма.Элементы[Элемент.ИмяЭлемента].УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;    
			
		КонецЦикла;   
		
		Для Каждого Команда Из Описание.КомандыФормы Цикл			
			ОписаниеКоманды = ПолучитьСтруктуруОписанияКоманды();
			ОписаниеКоманды.ИмяКоманды = Команда.ИмяКоманды;
			ОписаниеКоманды.Заголовок = Команда.Заголовок;
			ОписаниеКоманды.Действие = Команда.Действие;
			ОписаниеКоманды.ВидКнопкиФормы = ВидКнопкиФормы[Команда.ВидКнопкиФормы];     
			
			Если ЗначениеЗаполнено(Команда.ЭлементРазмещения) Тогда
				ОписаниеКоманды.ЭлементРазмещения = Форма.Элементы[Команда.ЭлементРазмещения]; 
			КонецЕсли;  
			
			ДобавитьКомандуНаФорму(Форма, ОписаниеКоманды);
			
		КонецЦикла;     
				
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из Описание.Данные Цикл  
		
		Если СтрокаДанных.ТипХранилищаДанных = "ТаблицаЗначений" Тогда 			
			Форма[СтрокаДанных.ХранилищеДанных].Очистить();
			
			Для Каждого СтрокаДанныхДействия Из СтрокаДанных.ДанныеЭлемента Цикл
				СтрокаТаблицы = Форма[СтрокаДанных.ХранилищеДанных].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДанныхДействия);
			КонецЦикла;     
		ИначеЕсли СтрокаДанных.ТипХранилищаДанных = "Примитив" Тогда
			Форма[СтрокаДанных.ХранилищеДанных] = СтрокаДанных.ДанныеЭлемента;	
		КонецЕсли;         
		
	КонецЦикла;    
	
	Для Каждого ДопДействие из Описание.Дополнительно Цикл  
		
		Если ДопДействие.ИмяДействия = "ОтрисоватьДерево" Тогда
			SS_СлужебныйКлиентСервер.ОтрисоватьДеревоПоТаблице(Форма, Форма.Параметры.Действие);	
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции  


// Добавляет команду на форму
//
// Параметры:
//	Форма	 				- ФормаКлиентскогоПриложения 	- Форма, на которую добавляется кнопка
//  ОписаниеКоманды		 	- Структура 					- ключи: 
//    * Действие 			- Строка 					- Имя процедуры или функции, исполняемой командой. Должна быть расположена на форме.
//    * ВидКнопкиФормы 		- ВидКнопкиФормы 			- Вид добавляемой кнопки. 
//    * ИмяКоманды 			- Строка 					- (Необязательный) Имя добавляемой команды формы.
//    * Заголовок 			- Строка		 			- (Необязательный) Заголовок добавляемой команды формы.
//    * ЭлементРазмещения 	- ЭлементФормы	 			- (Необязательный) Элемент формы, в котором должа быть размещена кнопка.
//  	
Процедура ДобавитьКомандуНаФорму(Форма, ОписаниеКоманды) Экспорт
	
	ИмяКоманды 			= ?(ОписаниеКоманды.ИмяКоманды = "", ОписаниеКоманды.Действие, ОписаниеКоманды.ИмяКоманды);
	ЗаголовокКоманды	= ?(ОписаниеКоманды.Заголовок = "", ОписаниеКоманды.Действие, ОписаниеКоманды.Заголовок);
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = ОписаниеКоманды.Действие;
	Команда.Заголовок = ЗаголовокКоманды;
	
	Если ОписаниеКоманды.ЭлементРазмещения <> "" Тогда
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ОписаниеКоманды.ЭлементРазмещения);	
	Иначе
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"));
	КонецЕсли;
	
	Элемент.Вид = ОписаниеКоманды.ВидКнопкиФормы;
	Элемент.ИмяКоманды = ИмяКоманды;
		
КонецПроцедуры

// Добавляет реквизит на форму
//
// Параметры:
//	Форма	 				- ФормаКлиентскогоПриложения 	- Форма, на которую добавляется реквизит
//  ОписаниеЭлемента	 	- Структура					- ключи:
//    * ИмяРеквизита 		- Строка 					- Имя реквизита.
//    * ТипРеквизита 		- ОписаниеТипов			 	- Тип добавляемого реквизита. 
//    * Путь 				- Строка					- Путь к реквизиту формы
//    * ЗаголовокРеквизита 	- Строка	 				- Заголовок реквизита
//
Процедура ДобавитьРеквизитНаФорму(Форма, ОписаниеРеквизита) Экспорт
	
	ЗаголовокРеквизита	= ?(ОписаниеРеквизита.Заголовок = "", ОписаниеРеквизита.ИмяРеквизита, ОписаниеРеквизита.Заголовок);	
	
	РеквизитФормы = Новый РеквизитФормы(
		ОписаниеРеквизита.ИмяРеквизита,  	//Имя реквизита формы
		ОписаниеРеквизита.ТипРеквизита,     //Тип
		ОписаниеРеквизита.Путь,             //Путь  (Пусто, "Объект", ИмяТЧ) например "Объект.Товары"	
		ЗаголовокРеквизита);				//Заголовок
		
	ДобавляемыеРеквизиты = Новый Массив;	
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры

// Добавляет элемент на форму
//
// Параметры:
//	Форма	 				- ФормаКлиентскогоПриложения 	- Форма, на которую добавляется элемент
//  ОписаниеЭлемента	 	- Структура 					- ключи: 
//    * ИмяЭлемента 		- Строка 					- Имя элемента.
//    * ТипЭлементаФормы 	- Тип			 			- Тип добавляемого элемента. 
//    * ВидЭлементаФормы 	- ВидПоляФормы, ГруппыФормы	- (Необязательный) Вид элемента формы.
//    * ПутьКДанным 	 	- Строка	 				- Путь к реквизиту формы
//    * ЭлементРазмещения 	- ЭлементФормы 				- (Необязательный) Элемент формы, в котором должа быть размещена кнопка
//    * Заголовок 			- Строка		 			- (Необязательный) Заголовок добавляемой команды формы.
//  
Процедура ДобавитьЭлементНаФорму(Форма, ОписаниеЭлемента) Экспорт   

	ЗаголовокЭлемента	= ?(ОписаниеЭлемента.Заголовок = "", ОписаниеЭлемента.ИмяЭлемента, ОписаниеЭлемента.Заголовок);	
	
	Если ОписаниеЭлемента.ЭлементРазмещения <> "" Тогда
		Элемент = Форма.Элементы.Добавить(
			ОписаниеЭлемента.ИмяЭлемента,    
			ОписаниеЭлемента.ТипЭлементаФормы, 
			ОписаниеЭлемента.ЭлементРазмещения);	
	Иначе
		Элемент = Форма.Элементы.Добавить(
			ОписаниеЭлемента.ИмяЭлемента,    
			ОписаниеЭлемента.ТипЭлементаФормы);
	КонецЕсли;
		     	
	Элемент.Заголовок = ЗаголовокЭлемента;  
	Если ЗначениеЗаполнено(ОписаниеЭлемента.ВидЭлементаФормы) Тогда
		Элемент.Вид = ОписаниеЭлемента.ВидЭлементаФормы;      
	КонецЕсли;	 
	Если ЗначениеЗаполнено(ОписаниеЭлемента.ПутьКДанным) Тогда  
		Элемент.ПутьКДанным = ОписаниеЭлемента.ПутьКДанным;       
	КонецЕсли;
			
КонецПроцедуры

//Ограничивает использование элементов формы
Процедура ЗаблокироватьФорму(Форма) Экспорт
	Элементы = Форма.Элементы;
	Для Каждого Элемент из Элементы цикл
		
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы") тогда
			Элемент.ТолькоПросмотр = Истина;			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") тогда
		    Элемент.Доступность = ложь;	
		КонецЕсли;
				
	КонецЦикла;
КонецПроцедуры

 //Возвращает структуру параметров добавляемой команды (см ДобавитьКомандуНаФорму)
Функция ПолучитьСтруктуруОписанияКоманды() Экспорт  
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Действие",			""); 
	СтруктураВозврата.Вставить("ВидКнопкиФормы",	"");
	СтруктураВозврата.Вставить("ЭлементРазмещения",	"");
	СтруктураВозврата.Вставить("ИмяКоманды",		"");
	СтруктураВозврата.Вставить("Заголовок",			""); 
	Возврат СтруктураВозврата;	
КонецФункции

//Возвращает структуру параметров добавляемого реквизита (см ДобавитьРеквизитНаФорму)
Функция ПолучитьСтруктуруОписанияРеквизитаФормы() Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяРеквизита",		""); 
	СтруктураВозврата.Вставить("ТипРеквизита",		"");
	СтруктураВозврата.Вставить("Путь",				"");
	СтруктураВозврата.Вставить("Заголовок",			"");
	Возврат СтруктураВозврата;	
КонецФункции

//Возвращает структуру параметров добавляемого элемента (см ДобавитьЭлементНаФорму)
Функция ПолучитьСтруктуруОписанияЭлементаФормы() Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяЭлемента",		""); 
	СтруктураВозврата.Вставить("ТипЭлементаФормы",	"");
	СтруктураВозврата.Вставить("ЭлементРазмещения",	"");
	СтруктураВозврата.Вставить("Заголовок",			"");
	СтруктураВозврата.Вставить("ВидЭлементаФормы",	"");   
	СтруктураВозврата.Вставить("ПутьКДанным",		"");
	Возврат СтруктураВозврата;	
КонецФункции

     

#КонецОбласти